/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { createImage } from "../funcs/createImage.js";
import { createSeries } from "../funcs/createSeries.js";
import { createSpeech } from "../funcs/createSpeech.js";
import { createVideo } from "../funcs/createVideo.js";
import { draftNewsVideo } from "../funcs/draftNewsVideo.js";
import { draftQuizVideo } from "../funcs/draftQuizVideo.js";
import { draftVideo } from "../funcs/draftVideo.js";
import { draftVideoFromScript } from "../funcs/draftVideoFromScript.js";
import { draftVideoFromURL } from "../funcs/draftVideoFromURL.js";
import { generateVideoTopics } from "../funcs/generateVideoTopics.js";
import { getAllAudio } from "../funcs/getAllAudio.js";
import { getAllSeries } from "../funcs/getAllSeries.js";
import { getAudio } from "../funcs/getAudio.js";
import { getConnections } from "../funcs/getConnections.js";
import { getImage } from "../funcs/getImage.js";
import { getImages } from "../funcs/getImages.js";
import { getImageStyles } from "../funcs/getImageStyles.js";
import { getMusic } from "../funcs/getMusic.js";
import { getMusicGenres } from "../funcs/getMusicGenres.js";
import { getSeries } from "../funcs/getSeries.js";
import { getUsage } from "../funcs/getUsage.js";
import { getVideo } from "../funcs/getVideo.js";
import { getVideos } from "../funcs/getVideos.js";
import { getVoice } from "../funcs/getVoice.js";
import { getVoices } from "../funcs/getVoices.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { Status } from "./status.js";

export class ShortGenius extends ClientSDK {
  private _status?: Status;
  get status(): Status {
    return (this._status ??= new Status(this._options));
  }

  /**
   * List music genres
   *
   * @remarks
   * Gets a list of all music genres available.
   */
  async getMusicGenres(
    options?: RequestOptions,
  ): Promise<Array<components.MusicGenre>> {
    return unwrapAsync(getMusicGenres(
      this,
      options,
    ));
  }

  /**
   * List music
   *
   * @remarks
   * Gets a list of all music tracks available for the specified genre.
   */
  async getMusic(
    request: operations.GetMusicRequest,
    options?: RequestOptions,
  ): Promise<Array<components.Song>> {
    return unwrapAsync(getMusic(
      this,
      request,
      options,
    ));
  }

  /**
   * Draft video
   *
   * @remarks
   * Write a video on the provided topic. After calling this endpoint, call [Create Video](#tag/videos/POST/videos) with the results to create the video.
   */
  async draftVideo(
    request?: operations.DraftVideoRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<components.DraftVideo> {
    return unwrapAsync(draftVideo(
      this,
      request,
      options,
    ));
  }

  /**
   * Draft video from URL
   *
   * @remarks
   * Retrieve the content of a webpage and write a video based on it. ___Only text is currently supported___ -- the AI cannot watch videos. After calling this endpoint, call [Create Video](#tag/videos/POST/videos) with the results to create the video.
   */
  async draftVideoFromURL(
    request?: operations.DraftVideoFromURLRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<components.DraftVideo> {
    return unwrapAsync(draftVideoFromURL(
      this,
      request,
      options,
    ));
  }

  /**
   * Draft video from script
   *
   * @remarks
   * Write a video using the provided script. After calling this endpoint, call [Create Video](#tag/videos/POST/videos) with the results to create the video.
   */
  async draftVideoFromScript(
    request?: operations.DraftVideoFromScriptRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<components.DraftVideo> {
    return unwrapAsync(draftVideoFromScript(
      this,
      request,
      options,
    ));
  }

  /**
   * Draft quiz video
   *
   * @remarks
   * Make a quiz on the provided topic. After calling this endpoint, call [Create Video](#tag/videos/POST/videos) with the results to create the video.
   */
  async draftQuizVideo(
    request?: operations.DraftQuizVideoRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<components.DraftQuizVideo> {
    return unwrapAsync(draftQuizVideo(
      this,
      request,
      options,
    ));
  }

  /**
   * Draft news video
   *
   * @remarks
   * Retrieve the latest news on the provided topic, then generate video scenes. After calling this endpoint, call [Create Video](#tag/videos/POST/videos) with the results to create the video.
   */
  async draftNewsVideo(
    request?: operations.DraftNewsVideoRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<components.DraftVideo> {
    return unwrapAsync(draftNewsVideo(
      this,
      request,
      options,
    ));
  }

  /**
   * Get video
   */
  async getVideo(
    request: operations.GetVideoRequest,
    options?: RequestOptions,
  ): Promise<components.Video> {
    return unwrapAsync(getVideo(
      this,
      request,
      options,
    ));
  }

  /**
   * List videos
   */
  async getVideos(
    request: operations.GetVideosRequest,
    options?: RequestOptions,
  ): Promise<operations.GetVideosResponseBody> {
    return unwrapAsync(getVideos(
      this,
      request,
      options,
    ));
  }

  /**
   * Create video
   *
   * @remarks
   * Before using this endpoint, call one of the following endpoints to generate and review your video's content:
   * - [Draft video](#tag/videos/POST/videos/drafts)
   * - [Draft video from URL](#tag/videos/POST/videos/drafts/url)
   * - [Draft video from script](#tag/videos/POST/videos/drafts/script)
   * - [Draft quiz video](#tag/videos/POST/videos/drafts/quiz)
   * - [Draft news video](#tag/videos/POST/videos/drafts/news)
   *
   * Once you (or your LLM) are happy, you can pass the content to this endpoint to create and render the video.
   */
  async createVideo(
    request?: operations.CreateVideoRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<components.Video> {
    return unwrapAsync(createVideo(
      this,
      request,
      options,
    ));
  }

  /**
   * Generate video topics
   *
   * @remarks
   * Generate ideas for around 50 videos within a given topic. You can then pass these to the [Create video](#tag/videos/POST/videos) endpoint.
   */
  async generateVideoTopics(
    request?: operations.GenerateVideoTopicsRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<Array<string>> {
    return unwrapAsync(generateVideoTopics(
      this,
      request,
      options,
    ));
  }

  /**
   * Create series
   */
  async createSeries(
    request?: operations.CreateSeriesRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<components.Series> {
    return unwrapAsync(createSeries(
      this,
      request,
      options,
    ));
  }

  /**
   * List series
   */
  async getAllSeries(
    request: operations.GetAllSeriesRequest,
    options?: RequestOptions,
  ): Promise<operations.GetAllSeriesResponseBody> {
    return unwrapAsync(getAllSeries(
      this,
      request,
      options,
    ));
  }

  /**
   * Get series
   */
  async getSeries(
    request: operations.GetSeriesRequest,
    options?: RequestOptions,
  ): Promise<operations.GetSeriesResponseBody> {
    return unwrapAsync(getSeries(
      this,
      request,
      options,
    ));
  }

  /**
   * List connections
   *
   * @remarks
   * List all the video publishing destinations you have configured.
   */
  async getConnections(
    options?: RequestOptions,
  ): Promise<Array<components.Connection>> {
    return unwrapAsync(getConnections(
      this,
      options,
    ));
  }

  /**
   * Create image
   *
   * @remarks
   * Create an image from a prompt.
   */
  async createImage(
    request?: operations.CreateImageRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<components.Image> {
    return unwrapAsync(createImage(
      this,
      request,
      options,
    ));
  }

  /**
   * List images
   *
   * @remarks
   * Get all the images you have generated.
   */
  async getImages(
    request: operations.GetImagesRequest,
    options?: RequestOptions,
  ): Promise<operations.GetImagesResponseBody> {
    return unwrapAsync(getImages(
      this,
      request,
      options,
    ));
  }

  /**
   * Get image
   */
  async getImage(
    request: operations.GetImageRequest,
    options?: RequestOptions,
  ): Promise<operations.GetImageResponseBody> {
    return unwrapAsync(getImage(
      this,
      request,
      options,
    ));
  }

  /**
   * List image styles
   *
   * @remarks
   * Get all the image styles available for creating images.
   */
  async getImageStyles(
    options?: RequestOptions,
  ): Promise<Array<components.ImageStyle>> {
    return unwrapAsync(getImageStyles(
      this,
      options,
    ));
  }

  /**
   * Create speech
   *
   * @remarks
   * Generate speech from provided text.
   */
  async createSpeech(
    request?: operations.CreateSpeechRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<components.Audio> {
    return unwrapAsync(createSpeech(
      this,
      request,
      options,
    ));
  }

  /**
   * List audio
   *
   * @remarks
   * Get all the speech generations you have created.
   */
  async getAllAudio(
    request: operations.GetAllAudioRequest,
    options?: RequestOptions,
  ): Promise<operations.GetAllAudioResponseBody> {
    return unwrapAsync(getAllAudio(
      this,
      request,
      options,
    ));
  }

  /**
   * Get audio
   */
  async getAudio(
    request: operations.GetAudioRequest,
    options?: RequestOptions,
  ): Promise<components.Audio> {
    return unwrapAsync(getAudio(
      this,
      request,
      options,
    ));
  }

  /**
   * List voices
   *
   * @remarks
   * Gets a list of all voices available for text-to-speech.
   */
  async getVoices(
    request: operations.GetVoicesRequest,
    options?: RequestOptions,
  ): Promise<Array<components.Voice>> {
    return unwrapAsync(getVoices(
      this,
      request,
      options,
    ));
  }

  /**
   * Get voice
   */
  async getVoice(
    request: operations.GetVoiceRequest,
    options?: RequestOptions,
  ): Promise<components.Voice> {
    return unwrapAsync(getVoice(
      this,
      request,
      options,
    ));
  }

  /**
   * Get usage
   *
   * @remarks
   * Get usage information.
   */
  async getUsage(
    options?: RequestOptions,
  ): Promise<operations.GetUsageResponseBody> {
    return unwrapAsync(getUsage(
      this,
      options,
    ));
  }
}
