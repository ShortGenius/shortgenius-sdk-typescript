/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { audioGetAudio } from "../funcs/audioGetAudio.js";
import { audioGetAudioId } from "../funcs/audioGetAudioId.js";
import { audioGetAudioVoices } from "../funcs/audioGetAudioVoices.js";
import { audioGetAudioVoicesId } from "../funcs/audioGetAudioVoicesId.js";
import { audioPostAudioSpeech } from "../funcs/audioPostAudioSpeech.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Audio extends ClientSDK {
  /**
   * Create speech
   *
   * @remarks
   * Generate speech from provided text.
   */
  async postAudioSpeech(
    request?: operations.PostAudioSpeechRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<components.Audio> {
    return unwrapAsync(audioPostAudioSpeech(
      this,
      request,
      options,
    ));
  }

  /**
   * List audio
   *
   * @remarks
   * Get all the speech generations you have created.
   */
  async getAudio(
    request: operations.GetAudioRequest,
    options?: RequestOptions,
  ): Promise<operations.GetAudioResponseBody> {
    return unwrapAsync(audioGetAudio(
      this,
      request,
      options,
    ));
  }

  /**
   * Get audio
   */
  async getAudioId(
    request: operations.GetAudioIdRequest,
    options?: RequestOptions,
  ): Promise<components.Audio> {
    return unwrapAsync(audioGetAudioId(
      this,
      request,
      options,
    ));
  }

  /**
   * List voices
   *
   * @remarks
   * Gets a list of all voices available for text-to-speech.
   */
  async getAudioVoices(
    request: operations.GetAudioVoicesRequest,
    options?: RequestOptions,
  ): Promise<Array<components.Voice>> {
    return unwrapAsync(audioGetAudioVoices(
      this,
      request,
      options,
    ));
  }

  /**
   * Get voice
   */
  async getAudioVoicesId(
    request: operations.GetAudioVoicesIdRequest,
    options?: RequestOptions,
  ): Promise<components.Voice> {
    return unwrapAsync(audioGetAudioVoicesId(
      this,
      request,
      options,
    ));
  }
}
