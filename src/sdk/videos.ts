/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { videosGetVideos } from "../funcs/videosGetVideos.js";
import { videosGetVideosId } from "../funcs/videosGetVideosId.js";
import { videosPostVideos } from "../funcs/videosPostVideos.js";
import { videosPostVideosDrafts } from "../funcs/videosPostVideosDrafts.js";
import { videosPostVideosDraftsNews } from "../funcs/videosPostVideosDraftsNews.js";
import { videosPostVideosDraftsQuiz } from "../funcs/videosPostVideosDraftsQuiz.js";
import { videosPostVideosDraftsScript } from "../funcs/videosPostVideosDraftsScript.js";
import { videosPostVideosDraftsUrl } from "../funcs/videosPostVideosDraftsUrl.js";
import { videosPostVideosTopics } from "../funcs/videosPostVideosTopics.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Videos extends ClientSDK {
  /**
   * Draft video
   *
   * @remarks
   * Write a video on the provided topic. After calling this endpoint, call [Create Video](#tag/videos/POST/videos) with the results to create the video.
   */
  async postVideosDrafts(
    request?: operations.PostVideosDraftsRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<components.DraftVideo> {
    return unwrapAsync(videosPostVideosDrafts(
      this,
      request,
      options,
    ));
  }

  /**
   * Draft video from URL
   *
   * @remarks
   * Retrieve the content of a webpage and write a video based on it. ___Only text is currently supported___ -- the AI cannot watch videos. After calling this endpoint, call [Create Video](#tag/videos/POST/videos) with the results to create the video.
   */
  async postVideosDraftsUrl(
    request?: operations.PostVideosDraftsUrlRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<components.DraftVideo> {
    return unwrapAsync(videosPostVideosDraftsUrl(
      this,
      request,
      options,
    ));
  }

  /**
   * Draft video from script
   *
   * @remarks
   * Write a video using the provided script. After calling this endpoint, call [Create Video](#tag/videos/POST/videos) with the results to create the video.
   */
  async postVideosDraftsScript(
    request?: operations.PostVideosDraftsScriptRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<components.DraftVideo> {
    return unwrapAsync(videosPostVideosDraftsScript(
      this,
      request,
      options,
    ));
  }

  /**
   * Draft quiz video
   *
   * @remarks
   * Make a quiz on the provided topic. After calling this endpoint, call [Create Video](#tag/videos/POST/videos) with the results to create the video.
   */
  async postVideosDraftsQuiz(
    request?: operations.PostVideosDraftsQuizRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<components.DraftQuizVideo> {
    return unwrapAsync(videosPostVideosDraftsQuiz(
      this,
      request,
      options,
    ));
  }

  /**
   * Draft news video
   *
   * @remarks
   * Retrieve the latest news on the provided topic, then generate video scenes. After calling this endpoint, call [Create Video](#tag/videos/POST/videos) with the results to create the video.
   */
  async postVideosDraftsNews(
    request?: operations.PostVideosDraftsNewsRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<components.DraftVideo> {
    return unwrapAsync(videosPostVideosDraftsNews(
      this,
      request,
      options,
    ));
  }

  /**
   * Get video
   */
  async getVideosId(
    request: operations.GetVideosIdRequest,
    options?: RequestOptions,
  ): Promise<components.Video> {
    return unwrapAsync(videosGetVideosId(
      this,
      request,
      options,
    ));
  }

  /**
   * List videos
   */
  async getVideos(
    request: operations.GetVideosRequest,
    options?: RequestOptions,
  ): Promise<operations.GetVideosResponseBody> {
    return unwrapAsync(videosGetVideos(
      this,
      request,
      options,
    ));
  }

  /**
   * Create video
   *
   * @remarks
   * Before using this endpoint, call one of the following endpoints to generate and review your video's content:
   * - [Draft video](#tag/videos/POST/videos/drafts)
   * - [Draft video from URL](#tag/videos/POST/videos/drafts/url)
   * - [Draft video from script](#tag/videos/POST/videos/drafts/script)
   * - [Draft quiz video](#tag/videos/POST/videos/drafts/quiz)
   * - [Draft news video](#tag/videos/POST/videos/drafts/news)
   *
   * Once you (or your LLM) are happy, you can pass the content to this endpoint to create and render the video.
   */
  async postVideos(
    request?: operations.PostVideosRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<components.Video> {
    return unwrapAsync(videosPostVideos(
      this,
      request,
      options,
    ));
  }

  /**
   * Generate video topics for content type
   *
   * @remarks
   * Generate ideas for around 50 videos within a given topic. You can then pass these to the [Create video](#tag/videos/POST/videos) endpoint.
   */
  async postVideosTopics(
    request?: operations.PostVideosTopicsRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<Array<string>> {
    return unwrapAsync(videosPostVideosTopics(
      this,
      request,
      options,
    ));
  }
}
