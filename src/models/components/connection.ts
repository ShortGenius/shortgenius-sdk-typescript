/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The publishing destination.
 */
export const ConnectionType = {
  Email: "Email",
  TikTok: "TikTok",
  YouTube: "YouTube",
  X: "X",
} as const;
/**
 * The publishing destination.
 */
export type ConnectionType = ClosedEnum<typeof ConnectionType>;

/**
 * A connection to a publishing destination
 */
export type Connection = {
  /**
   * Unique ID for the connection.
   */
  id: string;
  /**
   * The publishing destination.
   */
  type: ConnectionType;
  /**
   * User-friendly name for the connection.
   */
  name?: string | null | undefined;
};

/** @internal */
export const ConnectionType$inboundSchema: z.ZodNativeEnum<
  typeof ConnectionType
> = z.nativeEnum(ConnectionType);

/** @internal */
export const ConnectionType$outboundSchema: z.ZodNativeEnum<
  typeof ConnectionType
> = ConnectionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConnectionType$ {
  /** @deprecated use `ConnectionType$inboundSchema` instead. */
  export const inboundSchema = ConnectionType$inboundSchema;
  /** @deprecated use `ConnectionType$outboundSchema` instead. */
  export const outboundSchema = ConnectionType$outboundSchema;
}

/** @internal */
export const Connection$inboundSchema: z.ZodType<
  Connection,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: ConnectionType$inboundSchema,
  name: z.nullable(z.string()).optional(),
});

/** @internal */
export type Connection$Outbound = {
  id: string;
  type: string;
  name?: string | null | undefined;
};

/** @internal */
export const Connection$outboundSchema: z.ZodType<
  Connection$Outbound,
  z.ZodTypeDef,
  Connection
> = z.object({
  id: z.string(),
  type: ConnectionType$outboundSchema,
  name: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Connection$ {
  /** @deprecated use `Connection$inboundSchema` instead. */
  export const inboundSchema = Connection$inboundSchema;
  /** @deprecated use `Connection$outboundSchema` instead. */
  export const outboundSchema = Connection$outboundSchema;
  /** @deprecated use `Connection$Outbound` instead. */
  export type Outbound = Connection$Outbound;
}

export function connectionToJSON(connection: Connection): string {
  return JSON.stringify(Connection$outboundSchema.parse(connection));
}

export function connectionFromJSON(
  jsonString: string,
): SafeParseResult<Connection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Connection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Connection' from JSON`,
  );
}
