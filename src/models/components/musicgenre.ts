/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const RecommendedForLocales = {
  AfZA: "af-ZA",
  IDID: "id-ID",
  MsMY: "ms-MY",
  CaES: "ca-ES",
  CsCZ: "cs-CZ",
  DaDK: "da-DK",
  DEDE: "de-DE",
  EnUS: "en-US",
  ESES: "es-ES",
  Es419: "es-419",
  FrCA: "fr-CA",
  FRFR: "fr-FR",
  HRHR: "hr-HR",
  ITIT: "it-IT",
  HUHU: "hu-HU",
  NLNL: "nl-NL",
  NONO: "no-NO",
  PLPL: "pl-PL",
  PtBR: "pt-BR",
  PTPT: "pt-PT",
  RORO: "ro-RO",
  SKSK: "sk-SK",
  FIFI: "fi-FI",
  SvSE: "sv-SE",
  ViVN: "vi-VN",
  TRTR: "tr-TR",
  ElGR: "el-GR",
  RURU: "ru-RU",
  SrSP: "sr-SP",
  UkUA: "uk-UA",
  HyAM: "hy-AM",
  HeIL: "he-IL",
  UrPK: "ur-PK",
  ArSA: "ar-SA",
  HiIN: "hi-IN",
  THTH: "th-TH",
  KoKR: "ko-KR",
  JaJP: "ja-JP",
  ZhCN: "zh-CN",
  ZhTW: "zh-TW",
} as const;
export type RecommendedForLocales = ClosedEnum<typeof RecommendedForLocales>;

/**
 * A music genre.
 */
export type MusicGenre = {
  /**
   * The name of the genre (e.g., "Classical").
   */
  name: string;
  /**
   * The languages this genre is particularly popular in.
   */
  recommendedForLocales: Array<RecommendedForLocales>;
};

/** @internal */
export const RecommendedForLocales$inboundSchema: z.ZodNativeEnum<
  typeof RecommendedForLocales
> = z.nativeEnum(RecommendedForLocales);

/** @internal */
export const RecommendedForLocales$outboundSchema: z.ZodNativeEnum<
  typeof RecommendedForLocales
> = RecommendedForLocales$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecommendedForLocales$ {
  /** @deprecated use `RecommendedForLocales$inboundSchema` instead. */
  export const inboundSchema = RecommendedForLocales$inboundSchema;
  /** @deprecated use `RecommendedForLocales$outboundSchema` instead. */
  export const outboundSchema = RecommendedForLocales$outboundSchema;
}

/** @internal */
export const MusicGenre$inboundSchema: z.ZodType<
  MusicGenre,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  recommended_for_locales: z.array(RecommendedForLocales$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "recommended_for_locales": "recommendedForLocales",
  });
});

/** @internal */
export type MusicGenre$Outbound = {
  name: string;
  recommended_for_locales: Array<string>;
};

/** @internal */
export const MusicGenre$outboundSchema: z.ZodType<
  MusicGenre$Outbound,
  z.ZodTypeDef,
  MusicGenre
> = z.object({
  name: z.string(),
  recommendedForLocales: z.array(RecommendedForLocales$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    recommendedForLocales: "recommended_for_locales",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MusicGenre$ {
  /** @deprecated use `MusicGenre$inboundSchema` instead. */
  export const inboundSchema = MusicGenre$inboundSchema;
  /** @deprecated use `MusicGenre$outboundSchema` instead. */
  export const outboundSchema = MusicGenre$outboundSchema;
  /** @deprecated use `MusicGenre$Outbound` instead. */
  export type Outbound = MusicGenre$Outbound;
}

export function musicGenreToJSON(musicGenre: MusicGenre): string {
  return JSON.stringify(MusicGenre$outboundSchema.parse(musicGenre));
}

export function musicGenreFromJSON(
  jsonString: string,
): SafeParseResult<MusicGenre, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MusicGenre$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MusicGenre' from JSON`,
  );
}
