/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Options = {
  text: string;
  correct: boolean;
};

export type Questions = {
  /**
   * A quiz question.
   */
  question: string;
  options: Array<Options>;
};

export type Categories = {
  /**
   * The number of questions viewers in this category got right (e.g., "1-2").
   */
  scoreRange: string;
  /**
   * The title of the category.
   */
  title: string;
};

export type Results = {
  /**
   * The header shown at the top of the quiz results.
   */
  header: string;
  /**
   * The text the AI narrates when showing the quiz results.
   */
  explanation: string;
  categories: Array<Categories>;
};

export type Quiz = {
  questions: Array<Questions>;
  results: Results;
};

/**
 * Scenes suitable for a quiz-style video.
 */
export type DraftQuizVideo = {
  /**
   * The title of the video.
   */
  title: string;
  /**
   * The description shown beside the video when posted to social media.
   */
  caption: string;
  quiz: Quiz;
};

/** @internal */
export const Options$inboundSchema: z.ZodType<Options, z.ZodTypeDef, unknown> =
  z.object({
    text: z.string(),
    correct: z.boolean(),
  });

/** @internal */
export type Options$Outbound = {
  text: string;
  correct: boolean;
};

/** @internal */
export const Options$outboundSchema: z.ZodType<
  Options$Outbound,
  z.ZodTypeDef,
  Options
> = z.object({
  text: z.string(),
  correct: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Options$ {
  /** @deprecated use `Options$inboundSchema` instead. */
  export const inboundSchema = Options$inboundSchema;
  /** @deprecated use `Options$outboundSchema` instead. */
  export const outboundSchema = Options$outboundSchema;
  /** @deprecated use `Options$Outbound` instead. */
  export type Outbound = Options$Outbound;
}

export function optionsToJSON(options: Options): string {
  return JSON.stringify(Options$outboundSchema.parse(options));
}

export function optionsFromJSON(
  jsonString: string,
): SafeParseResult<Options, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Options$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Options' from JSON`,
  );
}

/** @internal */
export const Questions$inboundSchema: z.ZodType<
  Questions,
  z.ZodTypeDef,
  unknown
> = z.object({
  question: z.string(),
  options: z.array(z.lazy(() => Options$inboundSchema)),
});

/** @internal */
export type Questions$Outbound = {
  question: string;
  options: Array<Options$Outbound>;
};

/** @internal */
export const Questions$outboundSchema: z.ZodType<
  Questions$Outbound,
  z.ZodTypeDef,
  Questions
> = z.object({
  question: z.string(),
  options: z.array(z.lazy(() => Options$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Questions$ {
  /** @deprecated use `Questions$inboundSchema` instead. */
  export const inboundSchema = Questions$inboundSchema;
  /** @deprecated use `Questions$outboundSchema` instead. */
  export const outboundSchema = Questions$outboundSchema;
  /** @deprecated use `Questions$Outbound` instead. */
  export type Outbound = Questions$Outbound;
}

export function questionsToJSON(questions: Questions): string {
  return JSON.stringify(Questions$outboundSchema.parse(questions));
}

export function questionsFromJSON(
  jsonString: string,
): SafeParseResult<Questions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Questions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Questions' from JSON`,
  );
}

/** @internal */
export const Categories$inboundSchema: z.ZodType<
  Categories,
  z.ZodTypeDef,
  unknown
> = z.object({
  score_range: z.string(),
  title: z.string(),
}).transform((v) => {
  return remap$(v, {
    "score_range": "scoreRange",
  });
});

/** @internal */
export type Categories$Outbound = {
  score_range: string;
  title: string;
};

/** @internal */
export const Categories$outboundSchema: z.ZodType<
  Categories$Outbound,
  z.ZodTypeDef,
  Categories
> = z.object({
  scoreRange: z.string(),
  title: z.string(),
}).transform((v) => {
  return remap$(v, {
    scoreRange: "score_range",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Categories$ {
  /** @deprecated use `Categories$inboundSchema` instead. */
  export const inboundSchema = Categories$inboundSchema;
  /** @deprecated use `Categories$outboundSchema` instead. */
  export const outboundSchema = Categories$outboundSchema;
  /** @deprecated use `Categories$Outbound` instead. */
  export type Outbound = Categories$Outbound;
}

export function categoriesToJSON(categories: Categories): string {
  return JSON.stringify(Categories$outboundSchema.parse(categories));
}

export function categoriesFromJSON(
  jsonString: string,
): SafeParseResult<Categories, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Categories$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Categories' from JSON`,
  );
}

/** @internal */
export const Results$inboundSchema: z.ZodType<Results, z.ZodTypeDef, unknown> =
  z.object({
    header: z.string(),
    explanation: z.string(),
    categories: z.array(z.lazy(() => Categories$inboundSchema)),
  });

/** @internal */
export type Results$Outbound = {
  header: string;
  explanation: string;
  categories: Array<Categories$Outbound>;
};

/** @internal */
export const Results$outboundSchema: z.ZodType<
  Results$Outbound,
  z.ZodTypeDef,
  Results
> = z.object({
  header: z.string(),
  explanation: z.string(),
  categories: z.array(z.lazy(() => Categories$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Results$ {
  /** @deprecated use `Results$inboundSchema` instead. */
  export const inboundSchema = Results$inboundSchema;
  /** @deprecated use `Results$outboundSchema` instead. */
  export const outboundSchema = Results$outboundSchema;
  /** @deprecated use `Results$Outbound` instead. */
  export type Outbound = Results$Outbound;
}

export function resultsToJSON(results: Results): string {
  return JSON.stringify(Results$outboundSchema.parse(results));
}

export function resultsFromJSON(
  jsonString: string,
): SafeParseResult<Results, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Results$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Results' from JSON`,
  );
}

/** @internal */
export const Quiz$inboundSchema: z.ZodType<Quiz, z.ZodTypeDef, unknown> = z
  .object({
    questions: z.array(z.lazy(() => Questions$inboundSchema)),
    results: z.lazy(() => Results$inboundSchema),
  });

/** @internal */
export type Quiz$Outbound = {
  questions: Array<Questions$Outbound>;
  results: Results$Outbound;
};

/** @internal */
export const Quiz$outboundSchema: z.ZodType<Quiz$Outbound, z.ZodTypeDef, Quiz> =
  z.object({
    questions: z.array(z.lazy(() => Questions$outboundSchema)),
    results: z.lazy(() => Results$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Quiz$ {
  /** @deprecated use `Quiz$inboundSchema` instead. */
  export const inboundSchema = Quiz$inboundSchema;
  /** @deprecated use `Quiz$outboundSchema` instead. */
  export const outboundSchema = Quiz$outboundSchema;
  /** @deprecated use `Quiz$Outbound` instead. */
  export type Outbound = Quiz$Outbound;
}

export function quizToJSON(quiz: Quiz): string {
  return JSON.stringify(Quiz$outboundSchema.parse(quiz));
}

export function quizFromJSON(
  jsonString: string,
): SafeParseResult<Quiz, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Quiz$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Quiz' from JSON`,
  );
}

/** @internal */
export const DraftQuizVideo$inboundSchema: z.ZodType<
  DraftQuizVideo,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string(),
  caption: z.string(),
  quiz: z.lazy(() => Quiz$inboundSchema),
});

/** @internal */
export type DraftQuizVideo$Outbound = {
  title: string;
  caption: string;
  quiz: Quiz$Outbound;
};

/** @internal */
export const DraftQuizVideo$outboundSchema: z.ZodType<
  DraftQuizVideo$Outbound,
  z.ZodTypeDef,
  DraftQuizVideo
> = z.object({
  title: z.string(),
  caption: z.string(),
  quiz: z.lazy(() => Quiz$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DraftQuizVideo$ {
  /** @deprecated use `DraftQuizVideo$inboundSchema` instead. */
  export const inboundSchema = DraftQuizVideo$inboundSchema;
  /** @deprecated use `DraftQuizVideo$outboundSchema` instead. */
  export const outboundSchema = DraftQuizVideo$outboundSchema;
  /** @deprecated use `DraftQuizVideo$Outbound` instead. */
  export type Outbound = DraftQuizVideo$Outbound;
}

export function draftQuizVideoToJSON(draftQuizVideo: DraftQuizVideo): string {
  return JSON.stringify(DraftQuizVideo$outboundSchema.parse(draftQuizVideo));
}

export function draftQuizVideoFromJSON(
  jsonString: string,
): SafeParseResult<DraftQuizVideo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DraftQuizVideo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DraftQuizVideo' from JSON`,
  );
}
