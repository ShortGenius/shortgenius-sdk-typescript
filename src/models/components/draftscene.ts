/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Scene suitable for a video.
 */
export type DraftScene = {
  /**
   * If a news video, the headline for the story. Otherwise, blank.
   */
  title: string | null;
  /**
   * The text narrated during the scene.
   */
  caption: string;
  /**
   * The prompt for the first AI generated image.
   */
  firstImageDescription: string;
  /**
   * The prompt for the second AI generated image.
   */
  secondImageDescription: string;
};

/** @internal */
export const DraftScene$inboundSchema: z.ZodType<
  DraftScene,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.nullable(z.string()),
  caption: z.string(),
  first_image_description: z.string(),
  second_image_description: z.string(),
}).transform((v) => {
  return remap$(v, {
    "first_image_description": "firstImageDescription",
    "second_image_description": "secondImageDescription",
  });
});

/** @internal */
export type DraftScene$Outbound = {
  title: string | null;
  caption: string;
  first_image_description: string;
  second_image_description: string;
};

/** @internal */
export const DraftScene$outboundSchema: z.ZodType<
  DraftScene$Outbound,
  z.ZodTypeDef,
  DraftScene
> = z.object({
  title: z.nullable(z.string()),
  caption: z.string(),
  firstImageDescription: z.string(),
  secondImageDescription: z.string(),
}).transform((v) => {
  return remap$(v, {
    firstImageDescription: "first_image_description",
    secondImageDescription: "second_image_description",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DraftScene$ {
  /** @deprecated use `DraftScene$inboundSchema` instead. */
  export const inboundSchema = DraftScene$inboundSchema;
  /** @deprecated use `DraftScene$outboundSchema` instead. */
  export const outboundSchema = DraftScene$outboundSchema;
  /** @deprecated use `DraftScene$Outbound` instead. */
  export type Outbound = DraftScene$Outbound;
}

export function draftSceneToJSON(draftScene: DraftScene): string {
  return JSON.stringify(DraftScene$outboundSchema.parse(draftScene));
}

export function draftSceneFromJSON(
  jsonString: string,
): SafeParseResult<DraftScene, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DraftScene$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DraftScene' from JSON`,
  );
}
