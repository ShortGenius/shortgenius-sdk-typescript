/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Tags of the voice. Describe the characteristics of the voice.
 */
export type Tags = {
  language?: string | null | undefined;
  accent?: string | null | undefined;
  age?: string | null | undefined;
  category?: string | null | undefined;
  gender?: string | null | undefined;
  tone?: string | null | undefined;
  useCase?: string | null | undefined;
};

/**
 * Locale of the voice.
 */
export const VoiceLocale = {
  AfZA: "af-ZA",
  IDID: "id-ID",
  MsMY: "ms-MY",
  CaES: "ca-ES",
  CsCZ: "cs-CZ",
  DaDK: "da-DK",
  DEDE: "de-DE",
  EnUS: "en-US",
  ESES: "es-ES",
  Es419: "es-419",
  FrCA: "fr-CA",
  FRFR: "fr-FR",
  HRHR: "hr-HR",
  ITIT: "it-IT",
  HUHU: "hu-HU",
  NLNL: "nl-NL",
  NONO: "no-NO",
  PLPL: "pl-PL",
  PtBR: "pt-BR",
  PTPT: "pt-PT",
  RORO: "ro-RO",
  SKSK: "sk-SK",
  FIFI: "fi-FI",
  SvSE: "sv-SE",
  ViVN: "vi-VN",
  TRTR: "tr-TR",
  ElGR: "el-GR",
  RURU: "ru-RU",
  SrSP: "sr-SP",
  UkUA: "uk-UA",
  HyAM: "hy-AM",
  HeIL: "he-IL",
  UrPK: "ur-PK",
  ArSA: "ar-SA",
  HiIN: "hi-IN",
  THTH: "th-TH",
  KoKR: "ko-KR",
  JaJP: "ja-JP",
  ZhCN: "zh-CN",
  ZhTW: "zh-TW",
} as const;
/**
 * Locale of the voice.
 */
export type VoiceLocale = ClosedEnum<typeof VoiceLocale>;

/**
 * Source of the voice.
 */
export const Source = {
  Cartesia: "Cartesia",
  CartesiaClonedVoice: "CartesiaClonedVoice",
  ElevenLabs: "ElevenLabs",
  ElevenLabsShared: "ElevenLabsShared",
  OpenAI: "OpenAI",
} as const;
/**
 * Source of the voice.
 */
export type Source = ClosedEnum<typeof Source>;

/**
 * A text-to-speech voice
 */
export type Voice = {
  /**
   * Unique ID of the voice.
   */
  id: string;
  /**
   * Name of the voice.
   */
  name: string;
  /**
   * Description of the voice.
   */
  description: string | null;
  /**
   * Avatar url of the voice.
   */
  avatarUrl?: string | null | undefined;
  /**
   * Flag url of the voice.
   */
  flagUrl?: string | null | undefined;
  /**
   * Tags of the voice. Describe the characteristics of the voice.
   */
  tags: Tags | null;
  /**
   * URL of the preview audio of the voice.
   */
  previewUrl: string | null;
  /**
   * Locale of the voice.
   */
  locale: VoiceLocale | null;
  /**
   * Source of the voice.
   */
  source: Source;
};

/** @internal */
export const Tags$inboundSchema: z.ZodType<Tags, z.ZodTypeDef, unknown> = z
  .object({
    language: z.nullable(z.string()).optional(),
    accent: z.nullable(z.string()).optional(),
    age: z.nullable(z.string()).optional(),
    category: z.nullable(z.string()).optional(),
    gender: z.nullable(z.string()).optional(),
    tone: z.nullable(z.string()).optional(),
    useCase: z.nullable(z.string()).optional(),
  });

/** @internal */
export type Tags$Outbound = {
  language?: string | null | undefined;
  accent?: string | null | undefined;
  age?: string | null | undefined;
  category?: string | null | undefined;
  gender?: string | null | undefined;
  tone?: string | null | undefined;
  useCase?: string | null | undefined;
};

/** @internal */
export const Tags$outboundSchema: z.ZodType<Tags$Outbound, z.ZodTypeDef, Tags> =
  z.object({
    language: z.nullable(z.string()).optional(),
    accent: z.nullable(z.string()).optional(),
    age: z.nullable(z.string()).optional(),
    category: z.nullable(z.string()).optional(),
    gender: z.nullable(z.string()).optional(),
    tone: z.nullable(z.string()).optional(),
    useCase: z.nullable(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tags$ {
  /** @deprecated use `Tags$inboundSchema` instead. */
  export const inboundSchema = Tags$inboundSchema;
  /** @deprecated use `Tags$outboundSchema` instead. */
  export const outboundSchema = Tags$outboundSchema;
  /** @deprecated use `Tags$Outbound` instead. */
  export type Outbound = Tags$Outbound;
}

export function tagsToJSON(tags: Tags): string {
  return JSON.stringify(Tags$outboundSchema.parse(tags));
}

export function tagsFromJSON(
  jsonString: string,
): SafeParseResult<Tags, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tags$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tags' from JSON`,
  );
}

/** @internal */
export const VoiceLocale$inboundSchema: z.ZodNativeEnum<typeof VoiceLocale> = z
  .nativeEnum(VoiceLocale);

/** @internal */
export const VoiceLocale$outboundSchema: z.ZodNativeEnum<typeof VoiceLocale> =
  VoiceLocale$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VoiceLocale$ {
  /** @deprecated use `VoiceLocale$inboundSchema` instead. */
  export const inboundSchema = VoiceLocale$inboundSchema;
  /** @deprecated use `VoiceLocale$outboundSchema` instead. */
  export const outboundSchema = VoiceLocale$outboundSchema;
}

/** @internal */
export const Source$inboundSchema: z.ZodNativeEnum<typeof Source> = z
  .nativeEnum(Source);

/** @internal */
export const Source$outboundSchema: z.ZodNativeEnum<typeof Source> =
  Source$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Source$ {
  /** @deprecated use `Source$inboundSchema` instead. */
  export const inboundSchema = Source$inboundSchema;
  /** @deprecated use `Source$outboundSchema` instead. */
  export const outboundSchema = Source$outboundSchema;
}

/** @internal */
export const Voice$inboundSchema: z.ZodType<Voice, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    name: z.string(),
    description: z.nullable(z.string()),
    avatar_url: z.nullable(z.string()).optional(),
    flag_url: z.nullable(z.string()).optional(),
    tags: z.nullable(z.lazy(() => Tags$inboundSchema)),
    preview_url: z.nullable(z.string()),
    locale: z.nullable(VoiceLocale$inboundSchema),
    source: Source$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "avatar_url": "avatarUrl",
      "flag_url": "flagUrl",
      "preview_url": "previewUrl",
    });
  });

/** @internal */
export type Voice$Outbound = {
  id: string;
  name: string;
  description: string | null;
  avatar_url?: string | null | undefined;
  flag_url?: string | null | undefined;
  tags: Tags$Outbound | null;
  preview_url: string | null;
  locale: string | null;
  source: string;
};

/** @internal */
export const Voice$outboundSchema: z.ZodType<
  Voice$Outbound,
  z.ZodTypeDef,
  Voice
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  avatarUrl: z.nullable(z.string()).optional(),
  flagUrl: z.nullable(z.string()).optional(),
  tags: z.nullable(z.lazy(() => Tags$outboundSchema)),
  previewUrl: z.nullable(z.string()),
  locale: z.nullable(VoiceLocale$outboundSchema),
  source: Source$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    avatarUrl: "avatar_url",
    flagUrl: "flag_url",
    previewUrl: "preview_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Voice$ {
  /** @deprecated use `Voice$inboundSchema` instead. */
  export const inboundSchema = Voice$inboundSchema;
  /** @deprecated use `Voice$outboundSchema` instead. */
  export const outboundSchema = Voice$outboundSchema;
  /** @deprecated use `Voice$Outbound` instead. */
  export type Outbound = Voice$Outbound;
}

export function voiceToJSON(voice: Voice): string {
  return JSON.stringify(Voice$outboundSchema.parse(voice));
}

export function voiceFromJSON(
  jsonString: string,
): SafeParseResult<Voice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Voice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Voice' from JSON`,
  );
}
