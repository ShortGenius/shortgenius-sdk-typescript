/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const State = {
  Pending: "pending",
  Generating: "generating",
  Completed: "completed",
  Error: "error",
  RequestSmartMotion: "request_smart_motion",
  Placeholder: "placeholder",
} as const;
export type State = ClosedEnum<typeof State>;

/**
 * Aspect ratio of the generated image.
 */
export const ImageAspectRatio = {
  Nine16: "9:16",
  Sixteen9: "16:9",
  One1: "1:1",
} as const;
/**
 * Aspect ratio of the generated image.
 */
export type ImageAspectRatio = ClosedEnum<typeof ImageAspectRatio>;

export type Image = {
  id: string;
  url: string | null;
  type?: "GeneratedImage" | undefined;
  state: State;
  /**
   * Date and time (ISO 8601) when the media was created.
   */
  createdAt: string;
  /**
   * Date and time (ISO 8601) when the media was last updated.
   */
  updatedAt?: string | null | undefined;
  prompt: string;
  isNsfw: boolean;
  /**
   * Aspect ratio of the generated image.
   */
  aspectRatio?: ImageAspectRatio | undefined;
  imageStyleId?: string | null | undefined;
};

/** @internal */
export const State$inboundSchema: z.ZodNativeEnum<typeof State> = z.nativeEnum(
  State,
);

/** @internal */
export const State$outboundSchema: z.ZodNativeEnum<typeof State> =
  State$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace State$ {
  /** @deprecated use `State$inboundSchema` instead. */
  export const inboundSchema = State$inboundSchema;
  /** @deprecated use `State$outboundSchema` instead. */
  export const outboundSchema = State$outboundSchema;
}

/** @internal */
export const ImageAspectRatio$inboundSchema: z.ZodNativeEnum<
  typeof ImageAspectRatio
> = z.nativeEnum(ImageAspectRatio);

/** @internal */
export const ImageAspectRatio$outboundSchema: z.ZodNativeEnum<
  typeof ImageAspectRatio
> = ImageAspectRatio$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImageAspectRatio$ {
  /** @deprecated use `ImageAspectRatio$inboundSchema` instead. */
  export const inboundSchema = ImageAspectRatio$inboundSchema;
  /** @deprecated use `ImageAspectRatio$outboundSchema` instead. */
  export const outboundSchema = ImageAspectRatio$outboundSchema;
}

/** @internal */
export const Image$inboundSchema: z.ZodType<Image, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    url: z.nullable(z.string()),
    type: z.literal("GeneratedImage").optional(),
    state: State$inboundSchema,
    created_at: z.string(),
    updated_at: z.nullable(z.string()).optional(),
    prompt: z.string(),
    is_nsfw: z.boolean(),
    aspect_ratio: ImageAspectRatio$inboundSchema.default("9:16"),
    image_style_id: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "updated_at": "updatedAt",
      "is_nsfw": "isNsfw",
      "aspect_ratio": "aspectRatio",
      "image_style_id": "imageStyleId",
    });
  });

/** @internal */
export type Image$Outbound = {
  id: string;
  url: string | null;
  type: "GeneratedImage";
  state: string;
  created_at: string;
  updated_at?: string | null | undefined;
  prompt: string;
  is_nsfw: boolean;
  aspect_ratio: string;
  image_style_id?: string | null | undefined;
};

/** @internal */
export const Image$outboundSchema: z.ZodType<
  Image$Outbound,
  z.ZodTypeDef,
  Image
> = z.object({
  id: z.string(),
  url: z.nullable(z.string()),
  type: z.literal("GeneratedImage").default("GeneratedImage" as const),
  state: State$outboundSchema,
  createdAt: z.string(),
  updatedAt: z.nullable(z.string()).optional(),
  prompt: z.string(),
  isNsfw: z.boolean(),
  aspectRatio: ImageAspectRatio$outboundSchema.default("9:16"),
  imageStyleId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
    isNsfw: "is_nsfw",
    aspectRatio: "aspect_ratio",
    imageStyleId: "image_style_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Image$ {
  /** @deprecated use `Image$inboundSchema` instead. */
  export const inboundSchema = Image$inboundSchema;
  /** @deprecated use `Image$outboundSchema` instead. */
  export const outboundSchema = Image$outboundSchema;
  /** @deprecated use `Image$Outbound` instead. */
  export type Outbound = Image$Outbound;
}

export function imageToJSON(image: Image): string {
  return JSON.stringify(Image$outboundSchema.parse(image));
}

export function imageFromJSON(
  jsonString: string,
): SafeParseResult<Image, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Image$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Image' from JSON`,
  );
}
