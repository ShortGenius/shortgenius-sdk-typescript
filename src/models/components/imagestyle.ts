/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Privacy of the image style.
 */
export const Privacy = {
  Private: "Private",
  Public: "Public",
  System: "System",
} as const;
/**
 * Privacy of the image style.
 */
export type Privacy = ClosedEnum<typeof Privacy>;

/**
 * A predefined image style
 */
export type ImageStyle = {
  /**
   * Unique ID of the image style.
   */
  id: string;
  /**
   * Name of the image style.
   */
  name: string;
  /**
   * Privacy of the image style.
   */
  privacy: Privacy;
  /**
   * Prompt for the image style.
   */
  prompt: string;
  /**
   * Examples of the image style.
   */
  examples: Array<string>;
};

/** @internal */
export const Privacy$inboundSchema: z.ZodNativeEnum<typeof Privacy> = z
  .nativeEnum(Privacy);

/** @internal */
export const Privacy$outboundSchema: z.ZodNativeEnum<typeof Privacy> =
  Privacy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Privacy$ {
  /** @deprecated use `Privacy$inboundSchema` instead. */
  export const inboundSchema = Privacy$inboundSchema;
  /** @deprecated use `Privacy$outboundSchema` instead. */
  export const outboundSchema = Privacy$outboundSchema;
}

/** @internal */
export const ImageStyle$inboundSchema: z.ZodType<
  ImageStyle,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  privacy: Privacy$inboundSchema,
  prompt: z.string(),
  examples: z.array(z.string()),
});

/** @internal */
export type ImageStyle$Outbound = {
  id: string;
  name: string;
  privacy: string;
  prompt: string;
  examples: Array<string>;
};

/** @internal */
export const ImageStyle$outboundSchema: z.ZodType<
  ImageStyle$Outbound,
  z.ZodTypeDef,
  ImageStyle
> = z.object({
  id: z.string(),
  name: z.string(),
  privacy: Privacy$outboundSchema,
  prompt: z.string(),
  examples: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImageStyle$ {
  /** @deprecated use `ImageStyle$inboundSchema` instead. */
  export const inboundSchema = ImageStyle$inboundSchema;
  /** @deprecated use `ImageStyle$outboundSchema` instead. */
  export const outboundSchema = ImageStyle$outboundSchema;
  /** @deprecated use `ImageStyle$Outbound` instead. */
  export type Outbound = ImageStyle$Outbound;
}

export function imageStyleToJSON(imageStyle: ImageStyle): string {
  return JSON.stringify(ImageStyle$outboundSchema.parse(imageStyle));
}

export function imageStyleFromJSON(
  jsonString: string,
): SafeParseResult<ImageStyle, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ImageStyle$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ImageStyle' from JSON`,
  );
}
