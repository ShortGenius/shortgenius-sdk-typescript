/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Upload status of the video.
 */
export const PublishingState = {
  Pending: "pending",
  Processing: "processing",
  Completed: "completed",
  Skipped: "skipped",
  Error: "error",
} as const;
/**
 * Upload status of the video.
 */
export type PublishingState = ClosedEnum<typeof PublishingState>;

/**
 * Details about the created or retrieved video, including scenes and their media.
 */
export type Video = {
  id: string;
  title?: string | null | undefined;
  caption?: string | null | undefined;
  /**
   * Date and time (ISO 8601) when the video was created.
   */
  createdAt: string;
  /**
   * Date and time (ISO 8601) when the video was last updated.
   */
  updatedAt?: string | null | undefined;
  /**
   * ID of the associated series.
   */
  seriesId: string;
  /**
   * Upload status of the video.
   */
  publishingState: PublishingState;
  /**
   * Date and time (ISO 8601) when the video was fully uploaded.
   */
  publishAt: string | null;
};

/** @internal */
export const PublishingState$inboundSchema: z.ZodNativeEnum<
  typeof PublishingState
> = z.nativeEnum(PublishingState);

/** @internal */
export const PublishingState$outboundSchema: z.ZodNativeEnum<
  typeof PublishingState
> = PublishingState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublishingState$ {
  /** @deprecated use `PublishingState$inboundSchema` instead. */
  export const inboundSchema = PublishingState$inboundSchema;
  /** @deprecated use `PublishingState$outboundSchema` instead. */
  export const outboundSchema = PublishingState$outboundSchema;
}

/** @internal */
export const Video$inboundSchema: z.ZodType<Video, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    title: z.nullable(z.string()).optional(),
    caption: z.nullable(z.string()).optional(),
    created_at: z.string(),
    updated_at: z.nullable(z.string()).optional(),
    series_id: z.string(),
    publishing_state: PublishingState$inboundSchema,
    publish_at: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "updated_at": "updatedAt",
      "series_id": "seriesId",
      "publishing_state": "publishingState",
      "publish_at": "publishAt",
    });
  });

/** @internal */
export type Video$Outbound = {
  id: string;
  title?: string | null | undefined;
  caption?: string | null | undefined;
  created_at: string;
  updated_at?: string | null | undefined;
  series_id: string;
  publishing_state: string;
  publish_at: string | null;
};

/** @internal */
export const Video$outboundSchema: z.ZodType<
  Video$Outbound,
  z.ZodTypeDef,
  Video
> = z.object({
  id: z.string(),
  title: z.nullable(z.string()).optional(),
  caption: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  updatedAt: z.nullable(z.string()).optional(),
  seriesId: z.string(),
  publishingState: PublishingState$outboundSchema,
  publishAt: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
    seriesId: "series_id",
    publishingState: "publishing_state",
    publishAt: "publish_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Video$ {
  /** @deprecated use `Video$inboundSchema` instead. */
  export const inboundSchema = Video$inboundSchema;
  /** @deprecated use `Video$outboundSchema` instead. */
  export const outboundSchema = Video$outboundSchema;
  /** @deprecated use `Video$Outbound` instead. */
  export type Outbound = Video$Outbound;
}

export function videoToJSON(video: Video): string {
  return JSON.stringify(Video$outboundSchema.parse(video));
}

export function videoFromJSON(
  jsonString: string,
): SafeParseResult<Video, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Video$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Video' from JSON`,
  );
}
