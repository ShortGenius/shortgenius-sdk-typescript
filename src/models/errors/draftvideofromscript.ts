/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * An error response object.
 */
export type DraftVideoFromScriptResponseResponseBodyData = {
  /**
   * Error message describing the reason for failure.
   */
  message?: string | null | undefined;
};

/**
 * An error response object.
 */
export class DraftVideoFromScriptResponseResponseBody extends Error {
  /** The original data that was passed to this error instance. */
  data$: DraftVideoFromScriptResponseResponseBodyData;

  constructor(err: DraftVideoFromScriptResponseResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.name = "DraftVideoFromScriptResponseResponseBody";
  }
}

/**
 * An error response object.
 */
export type DraftVideoFromScriptResponseBodyData = {
  /**
   * Error message describing the reason for failure.
   */
  message?: string | null | undefined;
};

/**
 * An error response object.
 */
export class DraftVideoFromScriptResponseBody extends Error {
  /** The original data that was passed to this error instance. */
  data$: DraftVideoFromScriptResponseBodyData;

  constructor(err: DraftVideoFromScriptResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.name = "DraftVideoFromScriptResponseBody";
  }
}

/** @internal */
export const DraftVideoFromScriptResponseResponseBody$inboundSchema: z.ZodType<
  DraftVideoFromScriptResponseResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.nullable(z.string()).optional(),
})
  .transform((v) => {
    return new DraftVideoFromScriptResponseResponseBody(v);
  });

/** @internal */
export type DraftVideoFromScriptResponseResponseBody$Outbound = {
  message?: string | null | undefined;
};

/** @internal */
export const DraftVideoFromScriptResponseResponseBody$outboundSchema: z.ZodType<
  DraftVideoFromScriptResponseResponseBody$Outbound,
  z.ZodTypeDef,
  DraftVideoFromScriptResponseResponseBody
> = z.instanceof(DraftVideoFromScriptResponseResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.nullable(z.string()).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DraftVideoFromScriptResponseResponseBody$ {
  /** @deprecated use `DraftVideoFromScriptResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    DraftVideoFromScriptResponseResponseBody$inboundSchema;
  /** @deprecated use `DraftVideoFromScriptResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    DraftVideoFromScriptResponseResponseBody$outboundSchema;
  /** @deprecated use `DraftVideoFromScriptResponseResponseBody$Outbound` instead. */
  export type Outbound = DraftVideoFromScriptResponseResponseBody$Outbound;
}

/** @internal */
export const DraftVideoFromScriptResponseBody$inboundSchema: z.ZodType<
  DraftVideoFromScriptResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.nullable(z.string()).optional(),
})
  .transform((v) => {
    return new DraftVideoFromScriptResponseBody(v);
  });

/** @internal */
export type DraftVideoFromScriptResponseBody$Outbound = {
  message?: string | null | undefined;
};

/** @internal */
export const DraftVideoFromScriptResponseBody$outboundSchema: z.ZodType<
  DraftVideoFromScriptResponseBody$Outbound,
  z.ZodTypeDef,
  DraftVideoFromScriptResponseBody
> = z.instanceof(DraftVideoFromScriptResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.nullable(z.string()).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DraftVideoFromScriptResponseBody$ {
  /** @deprecated use `DraftVideoFromScriptResponseBody$inboundSchema` instead. */
  export const inboundSchema = DraftVideoFromScriptResponseBody$inboundSchema;
  /** @deprecated use `DraftVideoFromScriptResponseBody$outboundSchema` instead. */
  export const outboundSchema = DraftVideoFromScriptResponseBody$outboundSchema;
  /** @deprecated use `DraftVideoFromScriptResponseBody$Outbound` instead. */
  export type Outbound = DraftVideoFromScriptResponseBody$Outbound;
}
