/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ShortGeniusError } from "./shortgeniuserror.js";

/**
 * An error response object.
 */
export type CreateVideoResponseResponseBodyData = {
  /**
   * Error message describing the reason for failure.
   */
  message?: string | null | undefined;
};

/**
 * An error response object.
 */
export class CreateVideoResponseResponseBody extends ShortGeniusError {
  /** The original data that was passed to this error instance. */
  data$: CreateVideoResponseResponseBodyData;

  constructor(
    err: CreateVideoResponseResponseBodyData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "CreateVideoResponseResponseBody";
  }
}

/**
 * An error response object.
 */
export type CreateVideoResponseBodyData = {
  /**
   * Error message describing the reason for failure.
   */
  message?: string | null | undefined;
};

/**
 * An error response object.
 */
export class CreateVideoResponseBody extends ShortGeniusError {
  /** The original data that was passed to this error instance. */
  data$: CreateVideoResponseBodyData;

  constructor(
    err: CreateVideoResponseBodyData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "CreateVideoResponseBody";
  }
}

/** @internal */
export const CreateVideoResponseResponseBody$inboundSchema: z.ZodType<
  CreateVideoResponseResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.nullable(z.string()).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new CreateVideoResponseResponseBody(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type CreateVideoResponseResponseBody$Outbound = {
  message?: string | null | undefined;
};

/** @internal */
export const CreateVideoResponseResponseBody$outboundSchema: z.ZodType<
  CreateVideoResponseResponseBody$Outbound,
  z.ZodTypeDef,
  CreateVideoResponseResponseBody
> = z.instanceof(CreateVideoResponseResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.nullable(z.string()).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateVideoResponseResponseBody$ {
  /** @deprecated use `CreateVideoResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateVideoResponseResponseBody$inboundSchema;
  /** @deprecated use `CreateVideoResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateVideoResponseResponseBody$outboundSchema;
  /** @deprecated use `CreateVideoResponseResponseBody$Outbound` instead. */
  export type Outbound = CreateVideoResponseResponseBody$Outbound;
}

/** @internal */
export const CreateVideoResponseBody$inboundSchema: z.ZodType<
  CreateVideoResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.nullable(z.string()).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new CreateVideoResponseBody(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type CreateVideoResponseBody$Outbound = {
  message?: string | null | undefined;
};

/** @internal */
export const CreateVideoResponseBody$outboundSchema: z.ZodType<
  CreateVideoResponseBody$Outbound,
  z.ZodTypeDef,
  CreateVideoResponseBody
> = z.instanceof(CreateVideoResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.nullable(z.string()).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateVideoResponseBody$ {
  /** @deprecated use `CreateVideoResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateVideoResponseBody$inboundSchema;
  /** @deprecated use `CreateVideoResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateVideoResponseBody$outboundSchema;
  /** @deprecated use `CreateVideoResponseBody$Outbound` instead. */
  export type Outbound = CreateVideoResponseBody$Outbound;
}
