/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ShortGeniusError } from "./shortgeniuserror.js";

/**
 * An error response object.
 */
export type CreateSpeechResponseResponseBodyData = {
  /**
   * Error message describing the reason for failure.
   */
  message?: string | null | undefined;
};

/**
 * An error response object.
 */
export class CreateSpeechResponseResponseBody extends ShortGeniusError {
  /** The original data that was passed to this error instance. */
  data$: CreateSpeechResponseResponseBodyData;

  constructor(
    err: CreateSpeechResponseResponseBodyData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "CreateSpeechResponseResponseBody";
  }
}

/**
 * An error response object.
 */
export type CreateSpeechResponseBodyData = {
  /**
   * Error message describing the reason for failure.
   */
  message?: string | null | undefined;
};

/**
 * An error response object.
 */
export class CreateSpeechResponseBody extends ShortGeniusError {
  /** The original data that was passed to this error instance. */
  data$: CreateSpeechResponseBodyData;

  constructor(
    err: CreateSpeechResponseBodyData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "CreateSpeechResponseBody";
  }
}

/** @internal */
export const CreateSpeechResponseResponseBody$inboundSchema: z.ZodType<
  CreateSpeechResponseResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.nullable(z.string()).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new CreateSpeechResponseResponseBody(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type CreateSpeechResponseResponseBody$Outbound = {
  message?: string | null | undefined;
};

/** @internal */
export const CreateSpeechResponseResponseBody$outboundSchema: z.ZodType<
  CreateSpeechResponseResponseBody$Outbound,
  z.ZodTypeDef,
  CreateSpeechResponseResponseBody
> = z.instanceof(CreateSpeechResponseResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.nullable(z.string()).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSpeechResponseResponseBody$ {
  /** @deprecated use `CreateSpeechResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateSpeechResponseResponseBody$inboundSchema;
  /** @deprecated use `CreateSpeechResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateSpeechResponseResponseBody$outboundSchema;
  /** @deprecated use `CreateSpeechResponseResponseBody$Outbound` instead. */
  export type Outbound = CreateSpeechResponseResponseBody$Outbound;
}

/** @internal */
export const CreateSpeechResponseBody$inboundSchema: z.ZodType<
  CreateSpeechResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.nullable(z.string()).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new CreateSpeechResponseBody(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type CreateSpeechResponseBody$Outbound = {
  message?: string | null | undefined;
};

/** @internal */
export const CreateSpeechResponseBody$outboundSchema: z.ZodType<
  CreateSpeechResponseBody$Outbound,
  z.ZodTypeDef,
  CreateSpeechResponseBody
> = z.instanceof(CreateSpeechResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.nullable(z.string()).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSpeechResponseBody$ {
  /** @deprecated use `CreateSpeechResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateSpeechResponseBody$inboundSchema;
  /** @deprecated use `CreateSpeechResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateSpeechResponseBody$outboundSchema;
  /** @deprecated use `CreateSpeechResponseBody$Outbound` instead. */
  export type Outbound = CreateSpeechResponseBody$Outbound;
}
