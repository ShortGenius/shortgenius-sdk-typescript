/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ShortGeniusError } from "./shortgeniuserror.js";

/**
 * An error response object.
 */
export type GetAllAudioResponseBodyData = {
  /**
   * Error message describing the reason for failure.
   */
  message?: string | null | undefined;
};

/**
 * An error response object.
 */
export class GetAllAudioResponseBody extends ShortGeniusError {
  /** The original data that was passed to this error instance. */
  data$: GetAllAudioResponseBodyData;

  constructor(
    err: GetAllAudioResponseBodyData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;

    this.name = "GetAllAudioResponseBody";
  }
}

/** @internal */
export const GetAllAudioResponseBody$inboundSchema: z.ZodType<
  GetAllAudioResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.nullable(z.string()).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new GetAllAudioResponseBody(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type GetAllAudioResponseBody$Outbound = {
  message?: string | null | undefined;
};

/** @internal */
export const GetAllAudioResponseBody$outboundSchema: z.ZodType<
  GetAllAudioResponseBody$Outbound,
  z.ZodTypeDef,
  GetAllAudioResponseBody
> = z.instanceof(GetAllAudioResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.nullable(z.string()).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllAudioResponseBody$ {
  /** @deprecated use `GetAllAudioResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetAllAudioResponseBody$inboundSchema;
  /** @deprecated use `GetAllAudioResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetAllAudioResponseBody$outboundSchema;
  /** @deprecated use `GetAllAudioResponseBody$Outbound` instead. */
  export type Outbound = GetAllAudioResponseBody$Outbound;
}
