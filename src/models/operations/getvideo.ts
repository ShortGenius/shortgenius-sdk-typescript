/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetVideoRequest = {
  /**
   * The unique ID of the video to retrieve.
   */
  id: string;
};

/** @internal */
export const GetVideoRequest$inboundSchema: z.ZodType<
  GetVideoRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetVideoRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetVideoRequest$outboundSchema: z.ZodType<
  GetVideoRequest$Outbound,
  z.ZodTypeDef,
  GetVideoRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetVideoRequest$ {
  /** @deprecated use `GetVideoRequest$inboundSchema` instead. */
  export const inboundSchema = GetVideoRequest$inboundSchema;
  /** @deprecated use `GetVideoRequest$outboundSchema` instead. */
  export const outboundSchema = GetVideoRequest$outboundSchema;
  /** @deprecated use `GetVideoRequest$Outbound` instead. */
  export type Outbound = GetVideoRequest$Outbound;
}

export function getVideoRequestToJSON(
  getVideoRequest: GetVideoRequest,
): string {
  return JSON.stringify(GetVideoRequest$outboundSchema.parse(getVideoRequest));
}

export function getVideoRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetVideoRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetVideoRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetVideoRequest' from JSON`,
  );
}
