/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The locale of the text.
 */
export const PostAudioSpeechLocale = {
  AfZA: "af-ZA",
  IDID: "id-ID",
  MsMY: "ms-MY",
  CaES: "ca-ES",
  CsCZ: "cs-CZ",
  DaDK: "da-DK",
  DEDE: "de-DE",
  EnUS: "en-US",
  ESES: "es-ES",
  Es419: "es-419",
  FrCA: "fr-CA",
  FRFR: "fr-FR",
  HRHR: "hr-HR",
  ITIT: "it-IT",
  HUHU: "hu-HU",
  NLNL: "nl-NL",
  NONO: "no-NO",
  PLPL: "pl-PL",
  PtBR: "pt-BR",
  PTPT: "pt-PT",
  RORO: "ro-RO",
  SKSK: "sk-SK",
  FIFI: "fi-FI",
  SvSE: "sv-SE",
  ViVN: "vi-VN",
  TRTR: "tr-TR",
  ElGR: "el-GR",
  RURU: "ru-RU",
  SrSP: "sr-SP",
  UkUA: "uk-UA",
  HyAM: "hy-AM",
  HeIL: "he-IL",
  UrPK: "ur-PK",
  ArSA: "ar-SA",
  HiIN: "hi-IN",
  THTH: "th-TH",
  KoKR: "ko-KR",
  JaJP: "ja-JP",
  ZhCN: "zh-CN",
  ZhTW: "zh-TW",
  Auto: "auto",
} as const;
/**
 * The locale of the text.
 */
export type PostAudioSpeechLocale = ClosedEnum<typeof PostAudioSpeechLocale>;

export type PostAudioSpeechRequestBody = {
  /**
   * The text to generate speech from.
   */
  text: string;
  /**
   * The locale of the text.
   */
  locale?: PostAudioSpeechLocale | undefined;
  /**
   * The voice to use for speech generation. See the [List voices](#tag/voices/GET/voices) endpoint.
   */
  voiceId: string;
  /**
   * If false, this endpoint immediately returns the incomplete speech record, and you can poll the [Get speech](#tag/voices/GET/media/get/{id}) endpoint until the task completes. If true, this endpoint waits until the speech generation completes, then returns the complete speech record. Defaults to false.
   */
  waitForGeneration?: boolean | undefined;
};

/** @internal */
export const PostAudioSpeechLocale$inboundSchema: z.ZodNativeEnum<
  typeof PostAudioSpeechLocale
> = z.nativeEnum(PostAudioSpeechLocale);

/** @internal */
export const PostAudioSpeechLocale$outboundSchema: z.ZodNativeEnum<
  typeof PostAudioSpeechLocale
> = PostAudioSpeechLocale$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostAudioSpeechLocale$ {
  /** @deprecated use `PostAudioSpeechLocale$inboundSchema` instead. */
  export const inboundSchema = PostAudioSpeechLocale$inboundSchema;
  /** @deprecated use `PostAudioSpeechLocale$outboundSchema` instead. */
  export const outboundSchema = PostAudioSpeechLocale$outboundSchema;
}

/** @internal */
export const PostAudioSpeechRequestBody$inboundSchema: z.ZodType<
  PostAudioSpeechRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  text: z.string(),
  locale: PostAudioSpeechLocale$inboundSchema.default("auto"),
  voice_id: z.string(),
  wait_for_generation: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "voice_id": "voiceId",
    "wait_for_generation": "waitForGeneration",
  });
});

/** @internal */
export type PostAudioSpeechRequestBody$Outbound = {
  text: string;
  locale: string;
  voice_id: string;
  wait_for_generation: boolean;
};

/** @internal */
export const PostAudioSpeechRequestBody$outboundSchema: z.ZodType<
  PostAudioSpeechRequestBody$Outbound,
  z.ZodTypeDef,
  PostAudioSpeechRequestBody
> = z.object({
  text: z.string(),
  locale: PostAudioSpeechLocale$outboundSchema.default("auto"),
  voiceId: z.string(),
  waitForGeneration: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    voiceId: "voice_id",
    waitForGeneration: "wait_for_generation",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostAudioSpeechRequestBody$ {
  /** @deprecated use `PostAudioSpeechRequestBody$inboundSchema` instead. */
  export const inboundSchema = PostAudioSpeechRequestBody$inboundSchema;
  /** @deprecated use `PostAudioSpeechRequestBody$outboundSchema` instead. */
  export const outboundSchema = PostAudioSpeechRequestBody$outboundSchema;
  /** @deprecated use `PostAudioSpeechRequestBody$Outbound` instead. */
  export type Outbound = PostAudioSpeechRequestBody$Outbound;
}

export function postAudioSpeechRequestBodyToJSON(
  postAudioSpeechRequestBody: PostAudioSpeechRequestBody,
): string {
  return JSON.stringify(
    PostAudioSpeechRequestBody$outboundSchema.parse(postAudioSpeechRequestBody),
  );
}

export function postAudioSpeechRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostAudioSpeechRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostAudioSpeechRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostAudioSpeechRequestBody' from JSON`,
  );
}
