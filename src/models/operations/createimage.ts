/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The aspect ratio of the image.
 */
export const CreateImageAspectRatio = {
  NineHundredAndSixteen: "9:16",
  OneHundredAndSixtyNine: "16:9",
  Eleven: "1:1",
} as const;
/**
 * The aspect ratio of the image.
 */
export type CreateImageAspectRatio = ClosedEnum<typeof CreateImageAspectRatio>;

export const Model = {
  OpenAI: "OpenAI",
  FluxUltraMax: "Flux Ultra/Max",
  FluxPro: "Flux Pro",
} as const;
export type Model = ClosedEnum<typeof Model>;

export const Quality = {
  Low: "low",
  Medium: "medium",
  High: "high",
} as const;
export type Quality = ClosedEnum<typeof Quality>;

/**
 * Parameters required to generate an image.
 */
export type CreateImageRequestBody = {
  /**
   * The prompt to generate the image from.
   */
  prompt: string;
  /**
   * The aspect ratio of the image.
   */
  aspectRatio: CreateImageAspectRatio;
  /**
   * The ID of the image style to use. Use the [List image styles](#tag/images/GET/presets/{type}) endpoint to get a list of available image styles.
   */
  imageStyleId?: string | null | undefined;
  /**
   * If you want to add the generated image to a video scene you can specify it here.
   */
  sceneId?: string | null | undefined;
  /**
   * If false, this endpoint immediately returns the incomplete image record, and you can poll the [Get image](#tag/images/GET/media/get/{id}) endpoint until the task completes. If true, this endpoint waits until the image generation completes, then returns the complete image record. Defaults to false.
   */
  waitForGeneration?: boolean | undefined;
  model?: Model | undefined;
  quality?: Quality | undefined;
  /**
   * The ID of the media to use as a source for the image.
   */
  sourceMediaId?: string | null | undefined;
};

/** @internal */
export const CreateImageAspectRatio$inboundSchema: z.ZodNativeEnum<
  typeof CreateImageAspectRatio
> = z.nativeEnum(CreateImageAspectRatio);

/** @internal */
export const CreateImageAspectRatio$outboundSchema: z.ZodNativeEnum<
  typeof CreateImageAspectRatio
> = CreateImageAspectRatio$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateImageAspectRatio$ {
  /** @deprecated use `CreateImageAspectRatio$inboundSchema` instead. */
  export const inboundSchema = CreateImageAspectRatio$inboundSchema;
  /** @deprecated use `CreateImageAspectRatio$outboundSchema` instead. */
  export const outboundSchema = CreateImageAspectRatio$outboundSchema;
}

/** @internal */
export const Model$inboundSchema: z.ZodNativeEnum<typeof Model> = z.nativeEnum(
  Model,
);

/** @internal */
export const Model$outboundSchema: z.ZodNativeEnum<typeof Model> =
  Model$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Model$ {
  /** @deprecated use `Model$inboundSchema` instead. */
  export const inboundSchema = Model$inboundSchema;
  /** @deprecated use `Model$outboundSchema` instead. */
  export const outboundSchema = Model$outboundSchema;
}

/** @internal */
export const Quality$inboundSchema: z.ZodNativeEnum<typeof Quality> = z
  .nativeEnum(Quality);

/** @internal */
export const Quality$outboundSchema: z.ZodNativeEnum<typeof Quality> =
  Quality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Quality$ {
  /** @deprecated use `Quality$inboundSchema` instead. */
  export const inboundSchema = Quality$inboundSchema;
  /** @deprecated use `Quality$outboundSchema` instead. */
  export const outboundSchema = Quality$outboundSchema;
}

/** @internal */
export const CreateImageRequestBody$inboundSchema: z.ZodType<
  CreateImageRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt: z.string(),
  aspect_ratio: CreateImageAspectRatio$inboundSchema,
  image_style_id: z.nullable(z.string()).optional(),
  scene_id: z.nullable(z.string()).optional(),
  wait_for_generation: z.boolean().default(false),
  model: Model$inboundSchema.default("OpenAI"),
  quality: Quality$inboundSchema.default("high"),
  source_media_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "aspect_ratio": "aspectRatio",
    "image_style_id": "imageStyleId",
    "scene_id": "sceneId",
    "wait_for_generation": "waitForGeneration",
    "source_media_id": "sourceMediaId",
  });
});

/** @internal */
export type CreateImageRequestBody$Outbound = {
  prompt: string;
  aspect_ratio: string;
  image_style_id?: string | null | undefined;
  scene_id?: string | null | undefined;
  wait_for_generation: boolean;
  model: string;
  quality: string;
  source_media_id?: string | null | undefined;
};

/** @internal */
export const CreateImageRequestBody$outboundSchema: z.ZodType<
  CreateImageRequestBody$Outbound,
  z.ZodTypeDef,
  CreateImageRequestBody
> = z.object({
  prompt: z.string(),
  aspectRatio: CreateImageAspectRatio$outboundSchema,
  imageStyleId: z.nullable(z.string()).optional(),
  sceneId: z.nullable(z.string()).optional(),
  waitForGeneration: z.boolean().default(false),
  model: Model$outboundSchema.default("OpenAI"),
  quality: Quality$outboundSchema.default("high"),
  sourceMediaId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    aspectRatio: "aspect_ratio",
    imageStyleId: "image_style_id",
    sceneId: "scene_id",
    waitForGeneration: "wait_for_generation",
    sourceMediaId: "source_media_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateImageRequestBody$ {
  /** @deprecated use `CreateImageRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateImageRequestBody$inboundSchema;
  /** @deprecated use `CreateImageRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateImageRequestBody$outboundSchema;
  /** @deprecated use `CreateImageRequestBody$Outbound` instead. */
  export type Outbound = CreateImageRequestBody$Outbound;
}

export function createImageRequestBodyToJSON(
  createImageRequestBody: CreateImageRequestBody,
): string {
  return JSON.stringify(
    CreateImageRequestBody$outboundSchema.parse(createImageRequestBody),
  );
}

export function createImageRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateImageRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateImageRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateImageRequestBody' from JSON`,
  );
}
