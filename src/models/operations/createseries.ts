/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CreateSeriesContentType = {
  Custom: "Custom",
  News: "News",
  Quiz: "Quiz",
  History: "History",
  Scary: "Scary",
  Motivational: "Motivational",
  Bedtime: "Bedtime",
  FunFacts: "FunFacts",
  LifeTips: "LifeTips",
  Eli5: "ELI5",
  Philosophy: "Philosophy",
  Ad: "Ad",
} as const;
export type CreateSeriesContentType = ClosedEnum<
  typeof CreateSeriesContentType
>;

/**
 * Locale for the generated video.
 */
export const CreateSeriesLocale = {
  AfZA: "af-ZA",
  IDID: "id-ID",
  MsMY: "ms-MY",
  CaES: "ca-ES",
  CsCZ: "cs-CZ",
  DaDK: "da-DK",
  DEDE: "de-DE",
  EnUS: "en-US",
  ESES: "es-ES",
  Es419: "es-419",
  FrCA: "fr-CA",
  FRFR: "fr-FR",
  HRHR: "hr-HR",
  ITIT: "it-IT",
  HUHU: "hu-HU",
  NLNL: "nl-NL",
  NONO: "no-NO",
  PLPL: "pl-PL",
  PtBR: "pt-BR",
  PTPT: "pt-PT",
  RORO: "ro-RO",
  SKSK: "sk-SK",
  FIFI: "fi-FI",
  SvSE: "sv-SE",
  ViVN: "vi-VN",
  TRTR: "tr-TR",
  ElGR: "el-GR",
  RURU: "ru-RU",
  SrSP: "sr-SP",
  UkUA: "uk-UA",
  HyAM: "hy-AM",
  HeIL: "he-IL",
  UrPK: "ur-PK",
  ArSA: "ar-SA",
  HiIN: "hi-IN",
  THTH: "th-TH",
  KoKR: "ko-KR",
  JaJP: "ja-JP",
  ZhCN: "zh-CN",
  ZhTW: "zh-TW",
  Auto: "auto",
} as const;
/**
 * Locale for the generated video.
 */
export type CreateSeriesLocale = ClosedEnum<typeof CreateSeriesLocale>;

/**
 * Image model for the generated video.
 */
export const CreateSeriesImageModel = {
  OpenAI: "OpenAI",
  FluxUltraMax: "Flux Ultra/Max",
  FluxPro: "Flux Pro",
} as const;
/**
 * Image model for the generated video.
 */
export type CreateSeriesImageModel = ClosedEnum<typeof CreateSeriesImageModel>;

/**
 * Image quality for the generated video.
 */
export const CreateSeriesImageQuality = {
  Low: "low",
  Medium: "medium",
  High: "high",
} as const;
/**
 * Image quality for the generated video.
 */
export type CreateSeriesImageQuality = ClosedEnum<
  typeof CreateSeriesImageQuality
>;

/**
 * Default animation model for scene images when not specified individually.
 */
export const CreateSeriesAnimationModel = {
  None: "None",
  Seedance: "Seedance",
  Kling: "Kling",
  Hailuo02Standard: "Hailuo02Standard",
  Hailuo02Pro: "Hailuo02Pro",
  Veo3: "Veo3",
  SeedanceTTV: "SeedanceTTV",
} as const;
/**
 * Default animation model for scene images when not specified individually.
 */
export type CreateSeriesAnimationModel = ClosedEnum<
  typeof CreateSeriesAnimationModel
>;

/**
 * Default animation preset for scene images when not specified individually.
 */
export const CreateSeriesAnimationModelPreset = {
  FullyAnimated: "fully_animated",
  FirstSceneOnly: "first_scene_only",
  FirstImageEachScene: "first_image_each_scene",
} as const;
/**
 * Default animation preset for scene images when not specified individually.
 */
export type CreateSeriesAnimationModelPreset = ClosedEnum<
  typeof CreateSeriesAnimationModelPreset
>;

/**
 * Aspect ratio of the video. Not required for News videos.
 */
export const CreateSeriesAspectRatio = {
  NineHundredAndSixteen: "9:16",
  OneHundredAndSixtyNine: "16:9",
  Eleven: "1:1",
} as const;
/**
 * Aspect ratio of the video. Not required for News videos.
 */
export type CreateSeriesAspectRatio = ClosedEnum<
  typeof CreateSeriesAspectRatio
>;

export const TimeZone = {
  PacificPagoPago: "Pacific/Pago_Pago",
  AmericaAdak: "America/Adak",
  PacificHonolulu: "Pacific/Honolulu",
  PacificMarquesas: "Pacific/Marquesas",
  AmericaAnchorage: "America/Anchorage",
  AmericaTijuana: "America/Tijuana",
  AmericaLosAngeles: "America/Los_Angeles",
  AmericaPhoenix: "America/Phoenix",
  AmericaDenver: "America/Denver",
  AmericaGuatemala: "America/Guatemala",
  AmericaChicago: "America/Chicago",
  AmericaChihuahua: "America/Chihuahua",
  PacificEaster: "Pacific/Easter",
  AmericaMexicoCity: "America/Mexico_City",
  AmericaRegina: "America/Regina",
  AmericaBogota: "America/Bogota",
  AmericaCancun: "America/Cancun",
  AmericaNewYork: "America/New_York",
  AmericaPortAuPrince: "America/Port-au-Prince",
  AmericaHavana: "America/Havana",
  AmericaFortWayne: "America/Fort_Wayne",
  AmericaAsuncion: "America/Asuncion",
  AmericaHalifax: "America/Halifax",
  AmericaCaracas: "America/Caracas",
  AmericaCuiaba: "America/Cuiaba",
  AmericaLaPaz: "America/La_Paz",
  AmericaSantiago: "America/Santiago",
  AmericaGrandTurk: "America/Grand_Turk",
  AmericaStJohns: "America/St_Johns",
  AmericaAraguaina: "America/Araguaina",
  AmericaSaoPaulo: "America/Sao_Paulo",
  AmericaCayenne: "America/Cayenne",
  AmericaArgentinaBuenosAires: "America/Argentina/Buenos_Aires",
  AmericaGodthab: "America/Godthab",
  AmericaMontevideo: "America/Montevideo",
  AmericaMiquelon: "America/Miquelon",
  AmericaBahia: "America/Bahia",
  AmericaNoronha: "America/Noronha",
  AtlanticAzores: "Atlantic/Azores",
  AtlanticCapeVerde: "Atlantic/Cape_Verde",
  EuropeLondon: "Europe/London",
  AfricaAbidjan: "Africa/Abidjan",
  EuropeBerlin: "Europe/Berlin",
  EuropeBelgrade: "Europe/Belgrade",
  EuropeBrussels: "Europe/Brussels",
  AfricaLagos: "Africa/Lagos",
  AfricaCasablanca: "Africa/Casablanca",
  AfricaWindhoek: "Africa/Windhoek",
  EuropeBucharest: "Europe/Bucharest",
  AsiaBeirut: "Asia/Beirut",
  AfricaCairo: "Africa/Cairo",
  AsiaDamascus: "Asia/Damascus",
  AsiaGaza: "Asia/Gaza",
  AfricaMaputo: "Africa/Maputo",
  EuropeKiev: "Europe/Kiev",
  AsiaJerusalem: "Asia/Jerusalem",
  EuropeKaliningrad: "Europe/Kaliningrad",
  AfricaTripoli: "Africa/Tripoli",
  AsiaAmman: "Asia/Amman",
  AsiaBaghdad: "Asia/Baghdad",
  EuropeIstanbul: "Europe/Istanbul",
  AsiaRiyadh: "Asia/Riyadh",
  EuropeMinsk: "Europe/Minsk",
  EuropeMoscow: "Europe/Moscow",
  AfricaNairobi: "Africa/Nairobi",
  AsiaTehran: "Asia/Tehran",
  AsiaDubai: "Asia/Dubai",
  EuropeVolgograd: "Europe/Volgograd",
  AsiaBaku: "Asia/Baku",
  EuropeSamara: "Europe/Samara",
  IndianMauritius: "Indian/Mauritius",
  AsiaTbilisi: "Asia/Tbilisi",
  AsiaYerevan: "Asia/Yerevan",
  AsiaKabul: "Asia/Kabul",
  AsiaTashkent: "Asia/Tashkent",
  AsiaYekaterinburg: "Asia/Yekaterinburg",
  AsiaKarachi: "Asia/Karachi",
  AsiaAlmaty: "Asia/Almaty",
  AsiaKolkata: "Asia/Kolkata",
  AsiaColombo: "Asia/Colombo",
  AsiaKathmandu: "Asia/Kathmandu",
  AsiaDhaka: "Asia/Dhaka",
  AsiaRangoon: "Asia/Rangoon",
  AsiaNovosibirsk: "Asia/Novosibirsk",
  AsiaBangkok: "Asia/Bangkok",
  AsiaBarnaul: "Asia/Barnaul",
  AsiaHovd: "Asia/Hovd",
  AsiaKrasnoyarsk: "Asia/Krasnoyarsk",
  AsiaTomsk: "Asia/Tomsk",
  AsiaShanghai: "Asia/Shanghai",
  AsiaIrkutsk: "Asia/Irkutsk",
  AsiaKualaLumpur: "Asia/Kuala_Lumpur",
  AustraliaPerth: "Australia/Perth",
  AsiaTaipei: "Asia/Taipei",
  AsiaUlaanbaatar: "Asia/Ulaanbaatar",
  AsiaPyongyang: "Asia/Pyongyang",
  AustraliaEucla: "Australia/Eucla",
  AsiaChita: "Asia/Chita",
  AsiaTokyo: "Asia/Tokyo",
  AsiaSeoul: "Asia/Seoul",
  AsiaYakutsk: "Asia/Yakutsk",
  AustraliaAdelaide: "Australia/Adelaide",
  AustraliaDarwin: "Australia/Darwin",
  AustraliaBrisbane: "Australia/Brisbane",
  AustraliaSydney: "Australia/Sydney",
  PacificPortMoresby: "Pacific/Port_Moresby",
  AustraliaHobart: "Australia/Hobart",
  AsiaVladivostok: "Asia/Vladivostok",
  AustraliaLordHowe: "Australia/Lord_Howe",
  PacificBougainville: "Pacific/Bougainville",
  AsiaSrednekolymsk: "Asia/Srednekolymsk",
  AsiaMagadan: "Asia/Magadan",
  PacificNorfolk: "Pacific/Norfolk",
  AsiaSakhalin: "Asia/Sakhalin",
  PacificNoumea: "Pacific/Noumea",
  AsiaAnadyr: "Asia/Anadyr",
  PacificAuckland: "Pacific/Auckland",
  PacificFiji: "Pacific/Fiji",
  PacificChatham: "Pacific/Chatham",
  PacificTongatapu: "Pacific/Tongatapu",
  PacificApia: "Pacific/Apia",
  PacificKiritimati: "Pacific/Kiritimati",
} as const;
export type TimeZone = ClosedEnum<typeof TimeZone>;

export type Times = {
  dayOfWeek: number;
  timeOfDay: number;
};

/**
 * Publishing schedule for the video (optional).
 */
export type Schedule = {
  timeZone: TimeZone;
  times: Array<Times>;
};

export type Topics = {
  /**
   * Topic of each video in the series.
   */
  topic: string;
};

/**
 * The ad type.
 */
export const CreateSeriesType = {
  JustTheHook: "JustTheHook",
  HookAndVideo: "HookAndVideo",
  HookAndRealVideos: "HookAndRealVideos",
} as const;
/**
 * The ad type.
 */
export type CreateSeriesType = ClosedEnum<typeof CreateSeriesType>;

export type UgcMediaMetadata = {
  sourceImageUrl: string;
  muxPlaybackId: string | null;
};

export const CreateSeriesUgcMediaRequestSource = {
  Ugc: "Ugc",
} as const;
export type CreateSeriesUgcMediaRequestSource = ClosedEnum<
  typeof CreateSeriesUgcMediaRequestSource
>;

export type CreateSeriesUgcMediaRequestData = {
  id: string;
  ugcCreatorId: string;
  ugcPresetId: string;
  createdAt: string;
  hook?: string | null | undefined;
};

export const UgcMediaState = {
  Pending: "pending",
  Generating: "generating",
  Completed: "completed",
  Error: "error",
} as const;
export type UgcMediaState = ClosedEnum<typeof UgcMediaState>;

export type UgcMedia2 = {
  url: string | null;
  deletedAt?: string | null | undefined;
  metadata: UgcMediaMetadata;
  lastError?: string | null | undefined;
  type?: "UgcVideo" | undefined;
  source: CreateSeriesUgcMediaRequestSource | null;
  category?: "Ugc" | undefined;
  data: CreateSeriesUgcMediaRequestData;
  state: UgcMediaState;
};

export const CreateSeriesUgcMediaSource = {
  Ugc: "Ugc",
} as const;
export type CreateSeriesUgcMediaSource = ClosedEnum<
  typeof CreateSeriesUgcMediaSource
>;

export type CreateSeriesUgcMediaData = {
  id: string;
  hook?: string | null | undefined;
};

export type UgcMedia1 = {
  url: string | null;
  deletedAt?: string | null | undefined;
  metadata?: any | undefined;
  lastError?: string | null | undefined;
  type?: "UgcCreator" | undefined;
  source: CreateSeriesUgcMediaSource | null;
  category?: "Ugc" | undefined;
  data: CreateSeriesUgcMediaData;
  state?: "completed" | undefined;
};

export type CreateSeriesUgcMedia = UgcMedia2 | UgcMedia1;

/**
 * Ad content to be converted into a single video. Required for Ad videos.
 */
export type CreateSeriesAd = {
  /**
   * The ad product ID.
   */
  productId: string;
  /**
   * The ad type.
   */
  type: CreateSeriesType;
  /**
   * The ad UGC media.
   */
  ugcMedia: Array<UgcMedia2 | UgcMedia1>;
  /**
   * The ad media ID. Required for HookAndVideo type.
   */
  mediaIds?: Array<string> | undefined;
};

export type CreateSeriesRequestBody = {
  contentType?: CreateSeriesContentType | undefined;
  /**
   * Locale for the generated video.
   */
  locale?: CreateSeriesLocale | undefined;
  /**
   * The ID of the image style to use. Use the [List image styles](#tag/images/GET/presets/{type}) endpoint to get a list of available image styles. If left empty, the AI chooses.
   */
  imageStyleId?: string | undefined;
  /**
   * Image model for the generated video.
   */
  imageModel?: CreateSeriesImageModel | undefined;
  /**
   * Image quality for the generated video.
   */
  imageQuality?: CreateSeriesImageQuality | undefined;
  /**
   * Whether to use the raw image style mode. If true, the image style will be ignored.
   */
  imageStyleRawMode?: boolean | undefined;
  /**
   * Custom prompt for the image style. If you provide a custom prompt, the image style will be ignored.
   */
  imageStyleCustomPrompt?: string | undefined;
  /**
   * Default animation model for scene images when not specified individually.
   */
  animationModel?: CreateSeriesAnimationModel | undefined;
  /**
   * Default animation preset for scene images when not specified individually.
   */
  animationModelPreset?: CreateSeriesAnimationModelPreset | undefined;
  /**
   * List of publishing connection ids. Use the [List connections](#tag/connections/GET) endpoint to get a list of available connections
   */
  connectionIds: Array<string>;
  /**
   * Aspect ratio of the video. Not required for News videos.
   */
  aspectRatio?: CreateSeriesAspectRatio | undefined;
  /**
   * Voice playback speed percentage.
   */
  voicePlaybackRate?: number | undefined;
  /**
   * Voice volume percentage.
   */
  voiceVolume?: number | undefined;
  /**
   * Soundtrack playback speed percentage.
   */
  soundtrackPlaybackRate?: number | undefined;
  /**
   * Soundtrack volume percentage.
   */
  soundtrackVolume?: number | undefined;
  /**
   * Publishing schedule for the video (optional).
   */
  schedule?: Schedule | undefined;
  /**
   * The desired video duration in seconds. Must be <= 900. Not required for news.
   */
  duration?: number | undefined;
  /**
   * Array of series topics.
   */
  topics?: Array<Topics> | undefined;
  /**
   * Ad content to be converted into a single video. Required for Ad videos.
   */
  ad?: CreateSeriesAd | undefined;
  /**
   * Base idea or theme for generating custom topics. Required for Custom and Quiz series
   */
  parentTopic?: string | undefined;
  /**
   * List of voice IDs to use. See the [List voices](#tag/voices/GET/voices) endpoint. If left empty, the AI chooses.
   */
  voiceIds?: Array<string> | undefined;
  /**
   * List of soundtrack IDs to use for background music. See the [List music](#tag/music/GET/music/genres) endpoint for available genres, and the [List music tracks](#tag/music/GET/music/tracks) endpoint for available soundtracks. If left empty, the AI chooses.
   */
  soundtrackIds?: Array<string> | undefined;
};

/** @internal */
export const CreateSeriesContentType$inboundSchema: z.ZodNativeEnum<
  typeof CreateSeriesContentType
> = z.nativeEnum(CreateSeriesContentType);

/** @internal */
export const CreateSeriesContentType$outboundSchema: z.ZodNativeEnum<
  typeof CreateSeriesContentType
> = CreateSeriesContentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSeriesContentType$ {
  /** @deprecated use `CreateSeriesContentType$inboundSchema` instead. */
  export const inboundSchema = CreateSeriesContentType$inboundSchema;
  /** @deprecated use `CreateSeriesContentType$outboundSchema` instead. */
  export const outboundSchema = CreateSeriesContentType$outboundSchema;
}

/** @internal */
export const CreateSeriesLocale$inboundSchema: z.ZodNativeEnum<
  typeof CreateSeriesLocale
> = z.nativeEnum(CreateSeriesLocale);

/** @internal */
export const CreateSeriesLocale$outboundSchema: z.ZodNativeEnum<
  typeof CreateSeriesLocale
> = CreateSeriesLocale$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSeriesLocale$ {
  /** @deprecated use `CreateSeriesLocale$inboundSchema` instead. */
  export const inboundSchema = CreateSeriesLocale$inboundSchema;
  /** @deprecated use `CreateSeriesLocale$outboundSchema` instead. */
  export const outboundSchema = CreateSeriesLocale$outboundSchema;
}

/** @internal */
export const CreateSeriesImageModel$inboundSchema: z.ZodNativeEnum<
  typeof CreateSeriesImageModel
> = z.nativeEnum(CreateSeriesImageModel);

/** @internal */
export const CreateSeriesImageModel$outboundSchema: z.ZodNativeEnum<
  typeof CreateSeriesImageModel
> = CreateSeriesImageModel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSeriesImageModel$ {
  /** @deprecated use `CreateSeriesImageModel$inboundSchema` instead. */
  export const inboundSchema = CreateSeriesImageModel$inboundSchema;
  /** @deprecated use `CreateSeriesImageModel$outboundSchema` instead. */
  export const outboundSchema = CreateSeriesImageModel$outboundSchema;
}

/** @internal */
export const CreateSeriesImageQuality$inboundSchema: z.ZodNativeEnum<
  typeof CreateSeriesImageQuality
> = z.nativeEnum(CreateSeriesImageQuality);

/** @internal */
export const CreateSeriesImageQuality$outboundSchema: z.ZodNativeEnum<
  typeof CreateSeriesImageQuality
> = CreateSeriesImageQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSeriesImageQuality$ {
  /** @deprecated use `CreateSeriesImageQuality$inboundSchema` instead. */
  export const inboundSchema = CreateSeriesImageQuality$inboundSchema;
  /** @deprecated use `CreateSeriesImageQuality$outboundSchema` instead. */
  export const outboundSchema = CreateSeriesImageQuality$outboundSchema;
}

/** @internal */
export const CreateSeriesAnimationModel$inboundSchema: z.ZodNativeEnum<
  typeof CreateSeriesAnimationModel
> = z.nativeEnum(CreateSeriesAnimationModel);

/** @internal */
export const CreateSeriesAnimationModel$outboundSchema: z.ZodNativeEnum<
  typeof CreateSeriesAnimationModel
> = CreateSeriesAnimationModel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSeriesAnimationModel$ {
  /** @deprecated use `CreateSeriesAnimationModel$inboundSchema` instead. */
  export const inboundSchema = CreateSeriesAnimationModel$inboundSchema;
  /** @deprecated use `CreateSeriesAnimationModel$outboundSchema` instead. */
  export const outboundSchema = CreateSeriesAnimationModel$outboundSchema;
}

/** @internal */
export const CreateSeriesAnimationModelPreset$inboundSchema: z.ZodNativeEnum<
  typeof CreateSeriesAnimationModelPreset
> = z.nativeEnum(CreateSeriesAnimationModelPreset);

/** @internal */
export const CreateSeriesAnimationModelPreset$outboundSchema: z.ZodNativeEnum<
  typeof CreateSeriesAnimationModelPreset
> = CreateSeriesAnimationModelPreset$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSeriesAnimationModelPreset$ {
  /** @deprecated use `CreateSeriesAnimationModelPreset$inboundSchema` instead. */
  export const inboundSchema = CreateSeriesAnimationModelPreset$inboundSchema;
  /** @deprecated use `CreateSeriesAnimationModelPreset$outboundSchema` instead. */
  export const outboundSchema = CreateSeriesAnimationModelPreset$outboundSchema;
}

/** @internal */
export const CreateSeriesAspectRatio$inboundSchema: z.ZodNativeEnum<
  typeof CreateSeriesAspectRatio
> = z.nativeEnum(CreateSeriesAspectRatio);

/** @internal */
export const CreateSeriesAspectRatio$outboundSchema: z.ZodNativeEnum<
  typeof CreateSeriesAspectRatio
> = CreateSeriesAspectRatio$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSeriesAspectRatio$ {
  /** @deprecated use `CreateSeriesAspectRatio$inboundSchema` instead. */
  export const inboundSchema = CreateSeriesAspectRatio$inboundSchema;
  /** @deprecated use `CreateSeriesAspectRatio$outboundSchema` instead. */
  export const outboundSchema = CreateSeriesAspectRatio$outboundSchema;
}

/** @internal */
export const TimeZone$inboundSchema: z.ZodNativeEnum<typeof TimeZone> = z
  .nativeEnum(TimeZone);

/** @internal */
export const TimeZone$outboundSchema: z.ZodNativeEnum<typeof TimeZone> =
  TimeZone$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeZone$ {
  /** @deprecated use `TimeZone$inboundSchema` instead. */
  export const inboundSchema = TimeZone$inboundSchema;
  /** @deprecated use `TimeZone$outboundSchema` instead. */
  export const outboundSchema = TimeZone$outboundSchema;
}

/** @internal */
export const Times$inboundSchema: z.ZodType<Times, z.ZodTypeDef, unknown> = z
  .object({
    dayOfWeek: z.number(),
    timeOfDay: z.number(),
  });

/** @internal */
export type Times$Outbound = {
  dayOfWeek: number;
  timeOfDay: number;
};

/** @internal */
export const Times$outboundSchema: z.ZodType<
  Times$Outbound,
  z.ZodTypeDef,
  Times
> = z.object({
  dayOfWeek: z.number(),
  timeOfDay: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Times$ {
  /** @deprecated use `Times$inboundSchema` instead. */
  export const inboundSchema = Times$inboundSchema;
  /** @deprecated use `Times$outboundSchema` instead. */
  export const outboundSchema = Times$outboundSchema;
  /** @deprecated use `Times$Outbound` instead. */
  export type Outbound = Times$Outbound;
}

export function timesToJSON(times: Times): string {
  return JSON.stringify(Times$outboundSchema.parse(times));
}

export function timesFromJSON(
  jsonString: string,
): SafeParseResult<Times, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Times$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Times' from JSON`,
  );
}

/** @internal */
export const Schedule$inboundSchema: z.ZodType<
  Schedule,
  z.ZodTypeDef,
  unknown
> = z.object({
  timeZone: TimeZone$inboundSchema,
  times: z.array(z.lazy(() => Times$inboundSchema)),
});

/** @internal */
export type Schedule$Outbound = {
  timeZone: string;
  times: Array<Times$Outbound>;
};

/** @internal */
export const Schedule$outboundSchema: z.ZodType<
  Schedule$Outbound,
  z.ZodTypeDef,
  Schedule
> = z.object({
  timeZone: TimeZone$outboundSchema,
  times: z.array(z.lazy(() => Times$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Schedule$ {
  /** @deprecated use `Schedule$inboundSchema` instead. */
  export const inboundSchema = Schedule$inboundSchema;
  /** @deprecated use `Schedule$outboundSchema` instead. */
  export const outboundSchema = Schedule$outboundSchema;
  /** @deprecated use `Schedule$Outbound` instead. */
  export type Outbound = Schedule$Outbound;
}

export function scheduleToJSON(schedule: Schedule): string {
  return JSON.stringify(Schedule$outboundSchema.parse(schedule));
}

export function scheduleFromJSON(
  jsonString: string,
): SafeParseResult<Schedule, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Schedule$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Schedule' from JSON`,
  );
}

/** @internal */
export const Topics$inboundSchema: z.ZodType<Topics, z.ZodTypeDef, unknown> = z
  .object({
    topic: z.string(),
  });

/** @internal */
export type Topics$Outbound = {
  topic: string;
};

/** @internal */
export const Topics$outboundSchema: z.ZodType<
  Topics$Outbound,
  z.ZodTypeDef,
  Topics
> = z.object({
  topic: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Topics$ {
  /** @deprecated use `Topics$inboundSchema` instead. */
  export const inboundSchema = Topics$inboundSchema;
  /** @deprecated use `Topics$outboundSchema` instead. */
  export const outboundSchema = Topics$outboundSchema;
  /** @deprecated use `Topics$Outbound` instead. */
  export type Outbound = Topics$Outbound;
}

export function topicsToJSON(topics: Topics): string {
  return JSON.stringify(Topics$outboundSchema.parse(topics));
}

export function topicsFromJSON(
  jsonString: string,
): SafeParseResult<Topics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Topics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Topics' from JSON`,
  );
}

/** @internal */
export const CreateSeriesType$inboundSchema: z.ZodNativeEnum<
  typeof CreateSeriesType
> = z.nativeEnum(CreateSeriesType);

/** @internal */
export const CreateSeriesType$outboundSchema: z.ZodNativeEnum<
  typeof CreateSeriesType
> = CreateSeriesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSeriesType$ {
  /** @deprecated use `CreateSeriesType$inboundSchema` instead. */
  export const inboundSchema = CreateSeriesType$inboundSchema;
  /** @deprecated use `CreateSeriesType$outboundSchema` instead. */
  export const outboundSchema = CreateSeriesType$outboundSchema;
}

/** @internal */
export const UgcMediaMetadata$inboundSchema: z.ZodType<
  UgcMediaMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourceImageUrl: z.string(),
  muxPlaybackId: z.nullable(z.string()),
});

/** @internal */
export type UgcMediaMetadata$Outbound = {
  sourceImageUrl: string;
  muxPlaybackId: string | null;
};

/** @internal */
export const UgcMediaMetadata$outboundSchema: z.ZodType<
  UgcMediaMetadata$Outbound,
  z.ZodTypeDef,
  UgcMediaMetadata
> = z.object({
  sourceImageUrl: z.string(),
  muxPlaybackId: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UgcMediaMetadata$ {
  /** @deprecated use `UgcMediaMetadata$inboundSchema` instead. */
  export const inboundSchema = UgcMediaMetadata$inboundSchema;
  /** @deprecated use `UgcMediaMetadata$outboundSchema` instead. */
  export const outboundSchema = UgcMediaMetadata$outboundSchema;
  /** @deprecated use `UgcMediaMetadata$Outbound` instead. */
  export type Outbound = UgcMediaMetadata$Outbound;
}

export function ugcMediaMetadataToJSON(
  ugcMediaMetadata: UgcMediaMetadata,
): string {
  return JSON.stringify(
    UgcMediaMetadata$outboundSchema.parse(ugcMediaMetadata),
  );
}

export function ugcMediaMetadataFromJSON(
  jsonString: string,
): SafeParseResult<UgcMediaMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UgcMediaMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UgcMediaMetadata' from JSON`,
  );
}

/** @internal */
export const CreateSeriesUgcMediaRequestSource$inboundSchema: z.ZodNativeEnum<
  typeof CreateSeriesUgcMediaRequestSource
> = z.nativeEnum(CreateSeriesUgcMediaRequestSource);

/** @internal */
export const CreateSeriesUgcMediaRequestSource$outboundSchema: z.ZodNativeEnum<
  typeof CreateSeriesUgcMediaRequestSource
> = CreateSeriesUgcMediaRequestSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSeriesUgcMediaRequestSource$ {
  /** @deprecated use `CreateSeriesUgcMediaRequestSource$inboundSchema` instead. */
  export const inboundSchema = CreateSeriesUgcMediaRequestSource$inboundSchema;
  /** @deprecated use `CreateSeriesUgcMediaRequestSource$outboundSchema` instead. */
  export const outboundSchema =
    CreateSeriesUgcMediaRequestSource$outboundSchema;
}

/** @internal */
export const CreateSeriesUgcMediaRequestData$inboundSchema: z.ZodType<
  CreateSeriesUgcMediaRequestData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  ugcCreatorId: z.string(),
  ugcPresetId: z.string(),
  createdAt: z.string(),
  hook: z.nullable(z.string()).optional(),
});

/** @internal */
export type CreateSeriesUgcMediaRequestData$Outbound = {
  id: string;
  ugcCreatorId: string;
  ugcPresetId: string;
  createdAt: string;
  hook?: string | null | undefined;
};

/** @internal */
export const CreateSeriesUgcMediaRequestData$outboundSchema: z.ZodType<
  CreateSeriesUgcMediaRequestData$Outbound,
  z.ZodTypeDef,
  CreateSeriesUgcMediaRequestData
> = z.object({
  id: z.string(),
  ugcCreatorId: z.string(),
  ugcPresetId: z.string(),
  createdAt: z.string(),
  hook: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSeriesUgcMediaRequestData$ {
  /** @deprecated use `CreateSeriesUgcMediaRequestData$inboundSchema` instead. */
  export const inboundSchema = CreateSeriesUgcMediaRequestData$inboundSchema;
  /** @deprecated use `CreateSeriesUgcMediaRequestData$outboundSchema` instead. */
  export const outboundSchema = CreateSeriesUgcMediaRequestData$outboundSchema;
  /** @deprecated use `CreateSeriesUgcMediaRequestData$Outbound` instead. */
  export type Outbound = CreateSeriesUgcMediaRequestData$Outbound;
}

export function createSeriesUgcMediaRequestDataToJSON(
  createSeriesUgcMediaRequestData: CreateSeriesUgcMediaRequestData,
): string {
  return JSON.stringify(
    CreateSeriesUgcMediaRequestData$outboundSchema.parse(
      createSeriesUgcMediaRequestData,
    ),
  );
}

export function createSeriesUgcMediaRequestDataFromJSON(
  jsonString: string,
): SafeParseResult<CreateSeriesUgcMediaRequestData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSeriesUgcMediaRequestData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSeriesUgcMediaRequestData' from JSON`,
  );
}

/** @internal */
export const UgcMediaState$inboundSchema: z.ZodNativeEnum<
  typeof UgcMediaState
> = z.nativeEnum(UgcMediaState);

/** @internal */
export const UgcMediaState$outboundSchema: z.ZodNativeEnum<
  typeof UgcMediaState
> = UgcMediaState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UgcMediaState$ {
  /** @deprecated use `UgcMediaState$inboundSchema` instead. */
  export const inboundSchema = UgcMediaState$inboundSchema;
  /** @deprecated use `UgcMediaState$outboundSchema` instead. */
  export const outboundSchema = UgcMediaState$outboundSchema;
}

/** @internal */
export const UgcMedia2$inboundSchema: z.ZodType<
  UgcMedia2,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.nullable(z.string()),
  deletedAt: z.nullable(z.string()).optional(),
  metadata: z.lazy(() => UgcMediaMetadata$inboundSchema),
  lastError: z.nullable(z.string()).optional(),
  type: z.literal("UgcVideo").default("UgcVideo").optional(),
  source: z.nullable(CreateSeriesUgcMediaRequestSource$inboundSchema),
  category: z.literal("Ugc").default("Ugc").optional(),
  data: z.lazy(() => CreateSeriesUgcMediaRequestData$inboundSchema),
  state: UgcMediaState$inboundSchema,
});

/** @internal */
export type UgcMedia2$Outbound = {
  url: string | null;
  deletedAt?: string | null | undefined;
  metadata: UgcMediaMetadata$Outbound;
  lastError?: string | null | undefined;
  type: "UgcVideo";
  source: string | null;
  category: "Ugc";
  data: CreateSeriesUgcMediaRequestData$Outbound;
  state: string;
};

/** @internal */
export const UgcMedia2$outboundSchema: z.ZodType<
  UgcMedia2$Outbound,
  z.ZodTypeDef,
  UgcMedia2
> = z.object({
  url: z.nullable(z.string()),
  deletedAt: z.nullable(z.string()).optional(),
  metadata: z.lazy(() => UgcMediaMetadata$outboundSchema),
  lastError: z.nullable(z.string()).optional(),
  type: z.literal("UgcVideo").default("UgcVideo" as const),
  source: z.nullable(CreateSeriesUgcMediaRequestSource$outboundSchema),
  category: z.literal("Ugc").default("Ugc" as const),
  data: z.lazy(() => CreateSeriesUgcMediaRequestData$outboundSchema),
  state: UgcMediaState$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UgcMedia2$ {
  /** @deprecated use `UgcMedia2$inboundSchema` instead. */
  export const inboundSchema = UgcMedia2$inboundSchema;
  /** @deprecated use `UgcMedia2$outboundSchema` instead. */
  export const outboundSchema = UgcMedia2$outboundSchema;
  /** @deprecated use `UgcMedia2$Outbound` instead. */
  export type Outbound = UgcMedia2$Outbound;
}

export function ugcMedia2ToJSON(ugcMedia2: UgcMedia2): string {
  return JSON.stringify(UgcMedia2$outboundSchema.parse(ugcMedia2));
}

export function ugcMedia2FromJSON(
  jsonString: string,
): SafeParseResult<UgcMedia2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UgcMedia2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UgcMedia2' from JSON`,
  );
}

/** @internal */
export const CreateSeriesUgcMediaSource$inboundSchema: z.ZodNativeEnum<
  typeof CreateSeriesUgcMediaSource
> = z.nativeEnum(CreateSeriesUgcMediaSource);

/** @internal */
export const CreateSeriesUgcMediaSource$outboundSchema: z.ZodNativeEnum<
  typeof CreateSeriesUgcMediaSource
> = CreateSeriesUgcMediaSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSeriesUgcMediaSource$ {
  /** @deprecated use `CreateSeriesUgcMediaSource$inboundSchema` instead. */
  export const inboundSchema = CreateSeriesUgcMediaSource$inboundSchema;
  /** @deprecated use `CreateSeriesUgcMediaSource$outboundSchema` instead. */
  export const outboundSchema = CreateSeriesUgcMediaSource$outboundSchema;
}

/** @internal */
export const CreateSeriesUgcMediaData$inboundSchema: z.ZodType<
  CreateSeriesUgcMediaData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  hook: z.nullable(z.string()).optional(),
});

/** @internal */
export type CreateSeriesUgcMediaData$Outbound = {
  id: string;
  hook?: string | null | undefined;
};

/** @internal */
export const CreateSeriesUgcMediaData$outboundSchema: z.ZodType<
  CreateSeriesUgcMediaData$Outbound,
  z.ZodTypeDef,
  CreateSeriesUgcMediaData
> = z.object({
  id: z.string(),
  hook: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSeriesUgcMediaData$ {
  /** @deprecated use `CreateSeriesUgcMediaData$inboundSchema` instead. */
  export const inboundSchema = CreateSeriesUgcMediaData$inboundSchema;
  /** @deprecated use `CreateSeriesUgcMediaData$outboundSchema` instead. */
  export const outboundSchema = CreateSeriesUgcMediaData$outboundSchema;
  /** @deprecated use `CreateSeriesUgcMediaData$Outbound` instead. */
  export type Outbound = CreateSeriesUgcMediaData$Outbound;
}

export function createSeriesUgcMediaDataToJSON(
  createSeriesUgcMediaData: CreateSeriesUgcMediaData,
): string {
  return JSON.stringify(
    CreateSeriesUgcMediaData$outboundSchema.parse(createSeriesUgcMediaData),
  );
}

export function createSeriesUgcMediaDataFromJSON(
  jsonString: string,
): SafeParseResult<CreateSeriesUgcMediaData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSeriesUgcMediaData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSeriesUgcMediaData' from JSON`,
  );
}

/** @internal */
export const UgcMedia1$inboundSchema: z.ZodType<
  UgcMedia1,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.nullable(z.string()),
  deletedAt: z.nullable(z.string()).optional(),
  metadata: z.any().optional(),
  lastError: z.nullable(z.string()).optional(),
  type: z.literal("UgcCreator").default("UgcCreator").optional(),
  source: z.nullable(CreateSeriesUgcMediaSource$inboundSchema),
  category: z.literal("Ugc").default("Ugc").optional(),
  data: z.lazy(() => CreateSeriesUgcMediaData$inboundSchema),
  state: z.literal("completed").default("completed").optional(),
});

/** @internal */
export type UgcMedia1$Outbound = {
  url: string | null;
  deletedAt?: string | null | undefined;
  metadata?: any | undefined;
  lastError?: string | null | undefined;
  type: "UgcCreator";
  source: string | null;
  category: "Ugc";
  data: CreateSeriesUgcMediaData$Outbound;
  state: "completed";
};

/** @internal */
export const UgcMedia1$outboundSchema: z.ZodType<
  UgcMedia1$Outbound,
  z.ZodTypeDef,
  UgcMedia1
> = z.object({
  url: z.nullable(z.string()),
  deletedAt: z.nullable(z.string()).optional(),
  metadata: z.any().optional(),
  lastError: z.nullable(z.string()).optional(),
  type: z.literal("UgcCreator").default("UgcCreator" as const),
  source: z.nullable(CreateSeriesUgcMediaSource$outboundSchema),
  category: z.literal("Ugc").default("Ugc" as const),
  data: z.lazy(() => CreateSeriesUgcMediaData$outboundSchema),
  state: z.literal("completed").default("completed" as const),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UgcMedia1$ {
  /** @deprecated use `UgcMedia1$inboundSchema` instead. */
  export const inboundSchema = UgcMedia1$inboundSchema;
  /** @deprecated use `UgcMedia1$outboundSchema` instead. */
  export const outboundSchema = UgcMedia1$outboundSchema;
  /** @deprecated use `UgcMedia1$Outbound` instead. */
  export type Outbound = UgcMedia1$Outbound;
}

export function ugcMedia1ToJSON(ugcMedia1: UgcMedia1): string {
  return JSON.stringify(UgcMedia1$outboundSchema.parse(ugcMedia1));
}

export function ugcMedia1FromJSON(
  jsonString: string,
): SafeParseResult<UgcMedia1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UgcMedia1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UgcMedia1' from JSON`,
  );
}

/** @internal */
export const CreateSeriesUgcMedia$inboundSchema: z.ZodType<
  CreateSeriesUgcMedia,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UgcMedia2$inboundSchema),
  z.lazy(() => UgcMedia1$inboundSchema),
]);

/** @internal */
export type CreateSeriesUgcMedia$Outbound =
  | UgcMedia2$Outbound
  | UgcMedia1$Outbound;

/** @internal */
export const CreateSeriesUgcMedia$outboundSchema: z.ZodType<
  CreateSeriesUgcMedia$Outbound,
  z.ZodTypeDef,
  CreateSeriesUgcMedia
> = z.union([
  z.lazy(() => UgcMedia2$outboundSchema),
  z.lazy(() => UgcMedia1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSeriesUgcMedia$ {
  /** @deprecated use `CreateSeriesUgcMedia$inboundSchema` instead. */
  export const inboundSchema = CreateSeriesUgcMedia$inboundSchema;
  /** @deprecated use `CreateSeriesUgcMedia$outboundSchema` instead. */
  export const outboundSchema = CreateSeriesUgcMedia$outboundSchema;
  /** @deprecated use `CreateSeriesUgcMedia$Outbound` instead. */
  export type Outbound = CreateSeriesUgcMedia$Outbound;
}

export function createSeriesUgcMediaToJSON(
  createSeriesUgcMedia: CreateSeriesUgcMedia,
): string {
  return JSON.stringify(
    CreateSeriesUgcMedia$outboundSchema.parse(createSeriesUgcMedia),
  );
}

export function createSeriesUgcMediaFromJSON(
  jsonString: string,
): SafeParseResult<CreateSeriesUgcMedia, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSeriesUgcMedia$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSeriesUgcMedia' from JSON`,
  );
}

/** @internal */
export const CreateSeriesAd$inboundSchema: z.ZodType<
  CreateSeriesAd,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string(),
  type: CreateSeriesType$inboundSchema,
  ugc_media: z.array(
    z.union([
      z.lazy(() => UgcMedia2$inboundSchema),
      z.lazy(() => UgcMedia1$inboundSchema),
    ]),
  ),
  media_ids: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "ugc_media": "ugcMedia",
    "media_ids": "mediaIds",
  });
});

/** @internal */
export type CreateSeriesAd$Outbound = {
  product_id: string;
  type: string;
  ugc_media: Array<UgcMedia2$Outbound | UgcMedia1$Outbound>;
  media_ids?: Array<string> | undefined;
};

/** @internal */
export const CreateSeriesAd$outboundSchema: z.ZodType<
  CreateSeriesAd$Outbound,
  z.ZodTypeDef,
  CreateSeriesAd
> = z.object({
  productId: z.string(),
  type: CreateSeriesType$outboundSchema,
  ugcMedia: z.array(
    z.union([
      z.lazy(() => UgcMedia2$outboundSchema),
      z.lazy(() => UgcMedia1$outboundSchema),
    ]),
  ),
  mediaIds: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    ugcMedia: "ugc_media",
    mediaIds: "media_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSeriesAd$ {
  /** @deprecated use `CreateSeriesAd$inboundSchema` instead. */
  export const inboundSchema = CreateSeriesAd$inboundSchema;
  /** @deprecated use `CreateSeriesAd$outboundSchema` instead. */
  export const outboundSchema = CreateSeriesAd$outboundSchema;
  /** @deprecated use `CreateSeriesAd$Outbound` instead. */
  export type Outbound = CreateSeriesAd$Outbound;
}

export function createSeriesAdToJSON(createSeriesAd: CreateSeriesAd): string {
  return JSON.stringify(CreateSeriesAd$outboundSchema.parse(createSeriesAd));
}

export function createSeriesAdFromJSON(
  jsonString: string,
): SafeParseResult<CreateSeriesAd, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSeriesAd$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSeriesAd' from JSON`,
  );
}

/** @internal */
export const CreateSeriesRequestBody$inboundSchema: z.ZodType<
  CreateSeriesRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  content_type: CreateSeriesContentType$inboundSchema.default("Custom"),
  locale: CreateSeriesLocale$inboundSchema.default("auto"),
  image_style_id: z.string().optional(),
  image_model: CreateSeriesImageModel$inboundSchema.optional(),
  image_quality: CreateSeriesImageQuality$inboundSchema.optional(),
  image_style_raw_mode: z.boolean().optional(),
  image_style_custom_prompt: z.string().optional(),
  animation_model: CreateSeriesAnimationModel$inboundSchema.optional(),
  animation_model_preset: CreateSeriesAnimationModelPreset$inboundSchema
    .optional(),
  connection_ids: z.array(z.string()),
  aspect_ratio: CreateSeriesAspectRatio$inboundSchema.default("9:16"),
  voice_playback_rate: z.number().default(100),
  voice_volume: z.number().default(100),
  soundtrack_playback_rate: z.number().default(100),
  soundtrack_volume: z.number().default(100),
  schedule: z.lazy(() => Schedule$inboundSchema).optional(),
  duration: z.number().optional(),
  topics: z.array(z.lazy(() => Topics$inboundSchema)).optional(),
  ad: z.lazy(() => CreateSeriesAd$inboundSchema).optional(),
  parent_topic: z.string().optional(),
  voice_ids: z.array(z.string()).optional(),
  soundtrack_ids: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "content_type": "contentType",
    "image_style_id": "imageStyleId",
    "image_model": "imageModel",
    "image_quality": "imageQuality",
    "image_style_raw_mode": "imageStyleRawMode",
    "image_style_custom_prompt": "imageStyleCustomPrompt",
    "animation_model": "animationModel",
    "animation_model_preset": "animationModelPreset",
    "connection_ids": "connectionIds",
    "aspect_ratio": "aspectRatio",
    "voice_playback_rate": "voicePlaybackRate",
    "voice_volume": "voiceVolume",
    "soundtrack_playback_rate": "soundtrackPlaybackRate",
    "soundtrack_volume": "soundtrackVolume",
    "parent_topic": "parentTopic",
    "voice_ids": "voiceIds",
    "soundtrack_ids": "soundtrackIds",
  });
});

/** @internal */
export type CreateSeriesRequestBody$Outbound = {
  content_type: string;
  locale: string;
  image_style_id?: string | undefined;
  image_model?: string | undefined;
  image_quality?: string | undefined;
  image_style_raw_mode?: boolean | undefined;
  image_style_custom_prompt?: string | undefined;
  animation_model?: string | undefined;
  animation_model_preset?: string | undefined;
  connection_ids: Array<string>;
  aspect_ratio: string;
  voice_playback_rate: number;
  voice_volume: number;
  soundtrack_playback_rate: number;
  soundtrack_volume: number;
  schedule?: Schedule$Outbound | undefined;
  duration?: number | undefined;
  topics?: Array<Topics$Outbound> | undefined;
  ad?: CreateSeriesAd$Outbound | undefined;
  parent_topic?: string | undefined;
  voice_ids?: Array<string> | undefined;
  soundtrack_ids?: Array<string> | undefined;
};

/** @internal */
export const CreateSeriesRequestBody$outboundSchema: z.ZodType<
  CreateSeriesRequestBody$Outbound,
  z.ZodTypeDef,
  CreateSeriesRequestBody
> = z.object({
  contentType: CreateSeriesContentType$outboundSchema.default("Custom"),
  locale: CreateSeriesLocale$outboundSchema.default("auto"),
  imageStyleId: z.string().optional(),
  imageModel: CreateSeriesImageModel$outboundSchema.optional(),
  imageQuality: CreateSeriesImageQuality$outboundSchema.optional(),
  imageStyleRawMode: z.boolean().optional(),
  imageStyleCustomPrompt: z.string().optional(),
  animationModel: CreateSeriesAnimationModel$outboundSchema.optional(),
  animationModelPreset: CreateSeriesAnimationModelPreset$outboundSchema
    .optional(),
  connectionIds: z.array(z.string()),
  aspectRatio: CreateSeriesAspectRatio$outboundSchema.default("9:16"),
  voicePlaybackRate: z.number().default(100),
  voiceVolume: z.number().default(100),
  soundtrackPlaybackRate: z.number().default(100),
  soundtrackVolume: z.number().default(100),
  schedule: z.lazy(() => Schedule$outboundSchema).optional(),
  duration: z.number().optional(),
  topics: z.array(z.lazy(() => Topics$outboundSchema)).optional(),
  ad: z.lazy(() => CreateSeriesAd$outboundSchema).optional(),
  parentTopic: z.string().optional(),
  voiceIds: z.array(z.string()).optional(),
  soundtrackIds: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "content_type",
    imageStyleId: "image_style_id",
    imageModel: "image_model",
    imageQuality: "image_quality",
    imageStyleRawMode: "image_style_raw_mode",
    imageStyleCustomPrompt: "image_style_custom_prompt",
    animationModel: "animation_model",
    animationModelPreset: "animation_model_preset",
    connectionIds: "connection_ids",
    aspectRatio: "aspect_ratio",
    voicePlaybackRate: "voice_playback_rate",
    voiceVolume: "voice_volume",
    soundtrackPlaybackRate: "soundtrack_playback_rate",
    soundtrackVolume: "soundtrack_volume",
    parentTopic: "parent_topic",
    voiceIds: "voice_ids",
    soundtrackIds: "soundtrack_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSeriesRequestBody$ {
  /** @deprecated use `CreateSeriesRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateSeriesRequestBody$inboundSchema;
  /** @deprecated use `CreateSeriesRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateSeriesRequestBody$outboundSchema;
  /** @deprecated use `CreateSeriesRequestBody$Outbound` instead. */
  export type Outbound = CreateSeriesRequestBody$Outbound;
}

export function createSeriesRequestBodyToJSON(
  createSeriesRequestBody: CreateSeriesRequestBody,
): string {
  return JSON.stringify(
    CreateSeriesRequestBody$outboundSchema.parse(createSeriesRequestBody),
  );
}

export function createSeriesRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateSeriesRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSeriesRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSeriesRequestBody' from JSON`,
  );
}
