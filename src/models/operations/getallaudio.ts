/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAllAudioRequest = {
  /**
   * The page number to retrieve.
   */
  page?: number | undefined;
  /**
   * The maximum number of items per page.
   */
  limit?: number | undefined;
  /**
   * If 1, only public audio is returned.
   */
  forPublic?: number | undefined;
};

/**
 * Successful response
 */
export type GetAllAudioResponseBody = {
  /**
   * Array of audio records.
   */
  audio: Array<components.Audio>;
  /**
   * Indicates if more items are available.
   */
  hasMore: boolean;
};

/** @internal */
export const GetAllAudioRequest$inboundSchema: z.ZodType<
  GetAllAudioRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().default(0),
  limit: z.number().default(50),
  for_public: z.number().default(0),
}).transform((v) => {
  return remap$(v, {
    "for_public": "forPublic",
  });
});

/** @internal */
export type GetAllAudioRequest$Outbound = {
  page: number;
  limit: number;
  for_public: number;
};

/** @internal */
export const GetAllAudioRequest$outboundSchema: z.ZodType<
  GetAllAudioRequest$Outbound,
  z.ZodTypeDef,
  GetAllAudioRequest
> = z.object({
  page: z.number().default(0),
  limit: z.number().default(50),
  forPublic: z.number().default(0),
}).transform((v) => {
  return remap$(v, {
    forPublic: "for_public",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllAudioRequest$ {
  /** @deprecated use `GetAllAudioRequest$inboundSchema` instead. */
  export const inboundSchema = GetAllAudioRequest$inboundSchema;
  /** @deprecated use `GetAllAudioRequest$outboundSchema` instead. */
  export const outboundSchema = GetAllAudioRequest$outboundSchema;
  /** @deprecated use `GetAllAudioRequest$Outbound` instead. */
  export type Outbound = GetAllAudioRequest$Outbound;
}

export function getAllAudioRequestToJSON(
  getAllAudioRequest: GetAllAudioRequest,
): string {
  return JSON.stringify(
    GetAllAudioRequest$outboundSchema.parse(getAllAudioRequest),
  );
}

export function getAllAudioRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAllAudioRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllAudioRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllAudioRequest' from JSON`,
  );
}

/** @internal */
export const GetAllAudioResponseBody$inboundSchema: z.ZodType<
  GetAllAudioResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  audio: z.array(components.Audio$inboundSchema),
  has_more: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "has_more": "hasMore",
  });
});

/** @internal */
export type GetAllAudioResponseBody$Outbound = {
  audio: Array<components.Audio$Outbound>;
  has_more: boolean;
};

/** @internal */
export const GetAllAudioResponseBody$outboundSchema: z.ZodType<
  GetAllAudioResponseBody$Outbound,
  z.ZodTypeDef,
  GetAllAudioResponseBody
> = z.object({
  audio: z.array(components.Audio$outboundSchema),
  hasMore: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    hasMore: "has_more",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllAudioResponseBody$ {
  /** @deprecated use `GetAllAudioResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetAllAudioResponseBody$inboundSchema;
  /** @deprecated use `GetAllAudioResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetAllAudioResponseBody$outboundSchema;
  /** @deprecated use `GetAllAudioResponseBody$Outbound` instead. */
  export type Outbound = GetAllAudioResponseBody$Outbound;
}

export function getAllAudioResponseBodyToJSON(
  getAllAudioResponseBody: GetAllAudioResponseBody,
): string {
  return JSON.stringify(
    GetAllAudioResponseBody$outboundSchema.parse(getAllAudioResponseBody),
  );
}

export function getAllAudioResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetAllAudioResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllAudioResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllAudioResponseBody' from JSON`,
  );
}
