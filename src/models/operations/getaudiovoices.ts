/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The locale for which to retrieve voices.
 */
export const QueryParamLocale = {
  AfZA: "af-ZA",
  IDID: "id-ID",
  MsMY: "ms-MY",
  CaES: "ca-ES",
  CsCZ: "cs-CZ",
  DaDK: "da-DK",
  DEDE: "de-DE",
  EnUS: "en-US",
  ESES: "es-ES",
  Es419: "es-419",
  FrCA: "fr-CA",
  FRFR: "fr-FR",
  HRHR: "hr-HR",
  ITIT: "it-IT",
  HUHU: "hu-HU",
  NLNL: "nl-NL",
  NONO: "no-NO",
  PLPL: "pl-PL",
  PtBR: "pt-BR",
  PTPT: "pt-PT",
  RORO: "ro-RO",
  SKSK: "sk-SK",
  FIFI: "fi-FI",
  SvSE: "sv-SE",
  ViVN: "vi-VN",
  TRTR: "tr-TR",
  ElGR: "el-GR",
  RURU: "ru-RU",
  SrSP: "sr-SP",
  UkUA: "uk-UA",
  HyAM: "hy-AM",
  HeIL: "he-IL",
  UrPK: "ur-PK",
  ArSA: "ar-SA",
  HiIN: "hi-IN",
  THTH: "th-TH",
  KoKR: "ko-KR",
  JaJP: "ja-JP",
  ZhCN: "zh-CN",
  ZhTW: "zh-TW",
  Auto: "auto",
} as const;
/**
 * The locale for which to retrieve voices.
 */
export type QueryParamLocale = ClosedEnum<typeof QueryParamLocale>;

export type GetAudioVoicesRequest = {
  /**
   * The locale for which to retrieve voices.
   */
  locale?: QueryParamLocale | undefined;
  /**
   * The page number to retrieve.
   */
  page?: number | undefined;
  /**
   * The maximum number of items per page.
   */
  limit?: number | undefined;
};

/** @internal */
export const QueryParamLocale$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamLocale
> = z.nativeEnum(QueryParamLocale);

/** @internal */
export const QueryParamLocale$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamLocale
> = QueryParamLocale$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamLocale$ {
  /** @deprecated use `QueryParamLocale$inboundSchema` instead. */
  export const inboundSchema = QueryParamLocale$inboundSchema;
  /** @deprecated use `QueryParamLocale$outboundSchema` instead. */
  export const outboundSchema = QueryParamLocale$outboundSchema;
}

/** @internal */
export const GetAudioVoicesRequest$inboundSchema: z.ZodType<
  GetAudioVoicesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  locale: QueryParamLocale$inboundSchema.default("auto"),
  page: z.number().default(0),
  limit: z.number().default(20),
});

/** @internal */
export type GetAudioVoicesRequest$Outbound = {
  locale: string;
  page: number;
  limit: number;
};

/** @internal */
export const GetAudioVoicesRequest$outboundSchema: z.ZodType<
  GetAudioVoicesRequest$Outbound,
  z.ZodTypeDef,
  GetAudioVoicesRequest
> = z.object({
  locale: QueryParamLocale$outboundSchema.default("auto"),
  page: z.number().default(0),
  limit: z.number().default(20),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAudioVoicesRequest$ {
  /** @deprecated use `GetAudioVoicesRequest$inboundSchema` instead. */
  export const inboundSchema = GetAudioVoicesRequest$inboundSchema;
  /** @deprecated use `GetAudioVoicesRequest$outboundSchema` instead. */
  export const outboundSchema = GetAudioVoicesRequest$outboundSchema;
  /** @deprecated use `GetAudioVoicesRequest$Outbound` instead. */
  export type Outbound = GetAudioVoicesRequest$Outbound;
}

export function getAudioVoicesRequestToJSON(
  getAudioVoicesRequest: GetAudioVoicesRequest,
): string {
  return JSON.stringify(
    GetAudioVoicesRequest$outboundSchema.parse(getAudioVoicesRequest),
  );
}

export function getAudioVoicesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAudioVoicesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAudioVoicesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAudioVoicesRequest' from JSON`,
  );
}
