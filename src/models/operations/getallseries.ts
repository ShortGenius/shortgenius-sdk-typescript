/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAllSeriesRequest = {
  /**
   * The page number to retrieve.
   */
  page?: number | undefined;
  /**
   * The maximum number of items per page.
   */
  limit?: number | undefined;
};

/**
 * Response for listing video series.
 */
export type GetAllSeriesResponseBody = {
  /**
   * Array of video series.
   */
  series: Array<components.Series>;
  /**
   * Indicates if more items are available.
   */
  hasMore: boolean;
};

/** @internal */
export const GetAllSeriesRequest$inboundSchema: z.ZodType<
  GetAllSeriesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().default(0),
  limit: z.number().default(50),
});

/** @internal */
export type GetAllSeriesRequest$Outbound = {
  page: number;
  limit: number;
};

/** @internal */
export const GetAllSeriesRequest$outboundSchema: z.ZodType<
  GetAllSeriesRequest$Outbound,
  z.ZodTypeDef,
  GetAllSeriesRequest
> = z.object({
  page: z.number().default(0),
  limit: z.number().default(50),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllSeriesRequest$ {
  /** @deprecated use `GetAllSeriesRequest$inboundSchema` instead. */
  export const inboundSchema = GetAllSeriesRequest$inboundSchema;
  /** @deprecated use `GetAllSeriesRequest$outboundSchema` instead. */
  export const outboundSchema = GetAllSeriesRequest$outboundSchema;
  /** @deprecated use `GetAllSeriesRequest$Outbound` instead. */
  export type Outbound = GetAllSeriesRequest$Outbound;
}

export function getAllSeriesRequestToJSON(
  getAllSeriesRequest: GetAllSeriesRequest,
): string {
  return JSON.stringify(
    GetAllSeriesRequest$outboundSchema.parse(getAllSeriesRequest),
  );
}

export function getAllSeriesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAllSeriesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllSeriesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllSeriesRequest' from JSON`,
  );
}

/** @internal */
export const GetAllSeriesResponseBody$inboundSchema: z.ZodType<
  GetAllSeriesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  series: z.array(components.Series$inboundSchema),
  has_more: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "has_more": "hasMore",
  });
});

/** @internal */
export type GetAllSeriesResponseBody$Outbound = {
  series: Array<components.Series$Outbound>;
  has_more: boolean;
};

/** @internal */
export const GetAllSeriesResponseBody$outboundSchema: z.ZodType<
  GetAllSeriesResponseBody$Outbound,
  z.ZodTypeDef,
  GetAllSeriesResponseBody
> = z.object({
  series: z.array(components.Series$outboundSchema),
  hasMore: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    hasMore: "has_more",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllSeriesResponseBody$ {
  /** @deprecated use `GetAllSeriesResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetAllSeriesResponseBody$inboundSchema;
  /** @deprecated use `GetAllSeriesResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetAllSeriesResponseBody$outboundSchema;
  /** @deprecated use `GetAllSeriesResponseBody$Outbound` instead. */
  export type Outbound = GetAllSeriesResponseBody$Outbound;
}

export function getAllSeriesResponseBodyToJSON(
  getAllSeriesResponseBody: GetAllSeriesResponseBody,
): string {
  return JSON.stringify(
    GetAllSeriesResponseBody$outboundSchema.parse(getAllSeriesResponseBody),
  );
}

export function getAllSeriesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetAllSeriesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllSeriesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllSeriesResponseBody' from JSON`,
  );
}
