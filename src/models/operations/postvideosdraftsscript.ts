/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostVideosDraftsScriptRequestBody = {
  /**
   * The content you want the AI to narrate. It will split it up into logical scenes, and illustrate each scene.
   */
  script: string;
};

/** @internal */
export const PostVideosDraftsScriptRequestBody$inboundSchema: z.ZodType<
  PostVideosDraftsScriptRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  script: z.string(),
});

/** @internal */
export type PostVideosDraftsScriptRequestBody$Outbound = {
  script: string;
};

/** @internal */
export const PostVideosDraftsScriptRequestBody$outboundSchema: z.ZodType<
  PostVideosDraftsScriptRequestBody$Outbound,
  z.ZodTypeDef,
  PostVideosDraftsScriptRequestBody
> = z.object({
  script: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostVideosDraftsScriptRequestBody$ {
  /** @deprecated use `PostVideosDraftsScriptRequestBody$inboundSchema` instead. */
  export const inboundSchema = PostVideosDraftsScriptRequestBody$inboundSchema;
  /** @deprecated use `PostVideosDraftsScriptRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostVideosDraftsScriptRequestBody$outboundSchema;
  /** @deprecated use `PostVideosDraftsScriptRequestBody$Outbound` instead. */
  export type Outbound = PostVideosDraftsScriptRequestBody$Outbound;
}

export function postVideosDraftsScriptRequestBodyToJSON(
  postVideosDraftsScriptRequestBody: PostVideosDraftsScriptRequestBody,
): string {
  return JSON.stringify(
    PostVideosDraftsScriptRequestBody$outboundSchema.parse(
      postVideosDraftsScriptRequestBody,
    ),
  );
}

export function postVideosDraftsScriptRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostVideosDraftsScriptRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostVideosDraftsScriptRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostVideosDraftsScriptRequestBody' from JSON`,
  );
}
