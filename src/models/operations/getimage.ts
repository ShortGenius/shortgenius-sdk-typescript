/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetImageRequest = {
  /**
   * The unique ID of the image record to retrieve.
   */
  id: string;
};

export const GetImageResponseBodyResponse200ApplicationJSONState = {
  Pending: "pending",
  Generating: "generating",
  Error: "error",
  Completed: "completed",
} as const;
export type GetImageResponseBodyResponse200ApplicationJSONState = ClosedEnum<
  typeof GetImageResponseBodyResponse200ApplicationJSONState
>;

export type Eleven = {
  id: string;
  url: string | null;
  type?: "UserImageSegmentation" | undefined;
  state: GetImageResponseBodyResponse200ApplicationJSONState;
  /**
   * Date and time (ISO 8601) when the media was created.
   */
  createdAt: string;
  updatedAt?: string | null | undefined;
};

export const GetImageResponseBodyResponse200State = {
  Uploading: "uploading",
  Error: "error",
  Completed: "completed",
  RequestSmartMotion: "request_smart_motion",
} as const;
export type GetImageResponseBodyResponse200State = ClosedEnum<
  typeof GetImageResponseBodyResponse200State
>;

export type Ten = {
  id: string;
  url: string | null;
  state: GetImageResponseBodyResponse200State;
  type?: "UserVideo" | undefined;
  /**
   * Date and time (ISO 8601) when the media was created.
   */
  createdAt: string;
  updatedAt?: string | null | undefined;
};

export const GetImageResponseBodyResponseState = {
  Uploading: "uploading",
  Error: "error",
  Completed: "completed",
  RequestSmartMotion: "request_smart_motion",
} as const;
export type GetImageResponseBodyResponseState = ClosedEnum<
  typeof GetImageResponseBodyResponseState
>;

export type Nine = {
  id: string;
  url: string | null;
  state: GetImageResponseBodyResponseState;
  type?: "UserImageFromPicker" | undefined;
  /**
   * Date and time (ISO 8601) when the media was created.
   */
  createdAt: string;
  updatedAt?: string | null | undefined;
};

export const GetImageResponseBodyState = {
  Uploading: "uploading",
  Error: "error",
  Completed: "completed",
  RequestSmartMotion: "request_smart_motion",
} as const;
export type GetImageResponseBodyState = ClosedEnum<
  typeof GetImageResponseBodyState
>;

export type Eight = {
  id: string;
  url: string | null;
  state: GetImageResponseBodyState;
  type?: "UserImage" | undefined;
  /**
   * Date and time (ISO 8601) when the media was created.
   */
  createdAt: string;
  updatedAt?: string | null | undefined;
};

export const ResponseBodyState = {
  Pending: "pending",
  Generating: "generating",
  Completed: "completed",
  Error: "error",
} as const;
export type ResponseBodyState = ClosedEnum<typeof ResponseBodyState>;

export type Seven = {
  id: string;
  url: string | null;
  type?: "Segmentation" | undefined;
  state: ResponseBodyState;
  /**
   * Date and time (ISO 8601) when the media was created.
   */
  createdAt: string;
  updatedAt?: string | null | undefined;
};

export type Six = {
  id: string;
  url: string | null;
  type?: "VideoClip" | undefined;
  state?: "completed" | undefined;
  /**
   * Date and time (ISO 8601) when the media was created.
   */
  createdAt: string;
  updatedAt?: string | null | undefined;
};

export const State = {
  Pending: "pending",
  Generating: "generating",
  Completed: "completed",
  Error: "error",
} as const;
export type State = ClosedEnum<typeof State>;

export type Five = {
  id: string;
  url: string | null;
  type?: "UgcVideo" | undefined;
  state: State;
  /**
   * Date and time (ISO 8601) when the media was created.
   */
  createdAt: string;
  updatedAt?: string | null | undefined;
};

export type Four = {
  id: string;
  url: string | null;
  type?: "UgcCreator" | undefined;
  state?: "completed" | undefined;
  /**
   * Date and time (ISO 8601) when the media was created.
   */
  createdAt: string;
  updatedAt?: string | null | undefined;
};

export type Three = {
  id: string;
  url: string | null;
  userId: string;
  type?: "Video" | undefined;
  state?: "completed" | undefined;
  /**
   * Date and time (ISO 8601) when the media was created.
   */
  createdAt: string;
  updatedAt?: string | null | undefined;
};

export type Two = {
  id: string;
  url: string | null;
  userId: string;
  type?: "Image" | undefined;
  state?: "completed" | undefined;
  /**
   * Date and time (ISO 8601) when the media was created.
   */
  createdAt: string;
  updatedAt?: string | null | undefined;
};

export const GetImage1ResponseState = {
  Pending: "pending",
  Generating: "generating",
  Completed: "completed",
  Error: "error",
} as const;
export type GetImage1ResponseState = ClosedEnum<typeof GetImage1ResponseState>;

export type One4 = {
  id: string;
  url: string | null;
  type?: "Segmentation" | undefined;
  state: GetImage1ResponseState;
  /**
   * Date and time (ISO 8601) when the media was created.
   */
  createdAt: string;
  updatedAt?: string | null | undefined;
};

export const GetImage1State = {
  Pending: "pending",
  Generating: "generating",
  Completed: "completed",
  Error: "error",
} as const;
export type GetImage1State = ClosedEnum<typeof GetImage1State>;

export type One3 = {
  id: string;
  url: string | null;
  type?: "LumaGeneratedVideo" | undefined;
  state: GetImage1State;
  /**
   * Date and time (ISO 8601) when the media was created.
   */
  createdAt: string;
  updatedAt?: string | null | undefined;
};

export const OneState = {
  Pending: "pending",
  Generating: "generating",
  Completed: "completed",
  Error: "error",
} as const;
export type OneState = ClosedEnum<typeof OneState>;

export type One2 = {
  id: string;
  url: string | null;
  type?: "GeneratedVideo" | undefined;
  state: OneState;
  /**
   * Date and time (ISO 8601) when the media was created.
   */
  createdAt: string;
  updatedAt?: string | null | undefined;
  firstFrameImageId?: string | null | undefined;
};

export const GetImage1Response200State = {
  Pending: "pending",
  Generating: "generating",
  Completed: "completed",
  Error: "error",
  RequestSmartMotion: "request_smart_motion",
  Placeholder: "placeholder",
} as const;
export type GetImage1Response200State = ClosedEnum<
  typeof GetImage1Response200State
>;

export const OneAspectRatio = {
  Nine16: "9:16",
  Sixteen9: "16:9",
  One1: "1:1",
} as const;
export type OneAspectRatio = ClosedEnum<typeof OneAspectRatio>;

export type One1 = {
  id: string;
  url: string | null;
  type?: "GeneratedImage" | undefined;
  state: GetImage1Response200State;
  /**
   * Date and time (ISO 8601) when the media was created.
   */
  createdAt: string;
  updatedAt?: string | null | undefined;
  prompt: string;
  isNsfw: boolean;
  aspectRatio?: OneAspectRatio | undefined;
  imageStyleId?: string | null | undefined;
};

export type One = One3 | One4 | One2 | One1;

/**
 * Details of the requested image record.
 */
export type GetImageResponseBody =
  | Four
  | Five
  | Six
  | Seven
  | Eight
  | Nine
  | Ten
  | Eleven
  | Two
  | Three
  | One3
  | One4
  | One2
  | One1;

/** @internal */
export const GetImageRequest$inboundSchema: z.ZodType<
  GetImageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetImageRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetImageRequest$outboundSchema: z.ZodType<
  GetImageRequest$Outbound,
  z.ZodTypeDef,
  GetImageRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetImageRequest$ {
  /** @deprecated use `GetImageRequest$inboundSchema` instead. */
  export const inboundSchema = GetImageRequest$inboundSchema;
  /** @deprecated use `GetImageRequest$outboundSchema` instead. */
  export const outboundSchema = GetImageRequest$outboundSchema;
  /** @deprecated use `GetImageRequest$Outbound` instead. */
  export type Outbound = GetImageRequest$Outbound;
}

export function getImageRequestToJSON(
  getImageRequest: GetImageRequest,
): string {
  return JSON.stringify(GetImageRequest$outboundSchema.parse(getImageRequest));
}

export function getImageRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetImageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetImageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetImageRequest' from JSON`,
  );
}

/** @internal */
export const GetImageResponseBodyResponse200ApplicationJSONState$inboundSchema:
  z.ZodNativeEnum<typeof GetImageResponseBodyResponse200ApplicationJSONState> =
    z.nativeEnum(GetImageResponseBodyResponse200ApplicationJSONState);

/** @internal */
export const GetImageResponseBodyResponse200ApplicationJSONState$outboundSchema:
  z.ZodNativeEnum<typeof GetImageResponseBodyResponse200ApplicationJSONState> =
    GetImageResponseBodyResponse200ApplicationJSONState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetImageResponseBodyResponse200ApplicationJSONState$ {
  /** @deprecated use `GetImageResponseBodyResponse200ApplicationJSONState$inboundSchema` instead. */
  export const inboundSchema =
    GetImageResponseBodyResponse200ApplicationJSONState$inboundSchema;
  /** @deprecated use `GetImageResponseBodyResponse200ApplicationJSONState$outboundSchema` instead. */
  export const outboundSchema =
    GetImageResponseBodyResponse200ApplicationJSONState$outboundSchema;
}

/** @internal */
export const Eleven$inboundSchema: z.ZodType<Eleven, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    url: z.nullable(z.string()),
    type: z.literal("UserImageSegmentation").optional(),
    state: GetImageResponseBodyResponse200ApplicationJSONState$inboundSchema,
    created_at: z.string(),
    updated_at: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type Eleven$Outbound = {
  id: string;
  url: string | null;
  type: "UserImageSegmentation";
  state: string;
  created_at: string;
  updated_at?: string | null | undefined;
};

/** @internal */
export const Eleven$outboundSchema: z.ZodType<
  Eleven$Outbound,
  z.ZodTypeDef,
  Eleven
> = z.object({
  id: z.string(),
  url: z.nullable(z.string()),
  type: z.literal("UserImageSegmentation").default(
    "UserImageSegmentation" as const,
  ),
  state: GetImageResponseBodyResponse200ApplicationJSONState$outboundSchema,
  createdAt: z.string(),
  updatedAt: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Eleven$ {
  /** @deprecated use `Eleven$inboundSchema` instead. */
  export const inboundSchema = Eleven$inboundSchema;
  /** @deprecated use `Eleven$outboundSchema` instead. */
  export const outboundSchema = Eleven$outboundSchema;
  /** @deprecated use `Eleven$Outbound` instead. */
  export type Outbound = Eleven$Outbound;
}

export function elevenToJSON(eleven: Eleven): string {
  return JSON.stringify(Eleven$outboundSchema.parse(eleven));
}

export function elevenFromJSON(
  jsonString: string,
): SafeParseResult<Eleven, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Eleven$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Eleven' from JSON`,
  );
}

/** @internal */
export const GetImageResponseBodyResponse200State$inboundSchema:
  z.ZodNativeEnum<typeof GetImageResponseBodyResponse200State> = z.nativeEnum(
    GetImageResponseBodyResponse200State,
  );

/** @internal */
export const GetImageResponseBodyResponse200State$outboundSchema:
  z.ZodNativeEnum<typeof GetImageResponseBodyResponse200State> =
    GetImageResponseBodyResponse200State$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetImageResponseBodyResponse200State$ {
  /** @deprecated use `GetImageResponseBodyResponse200State$inboundSchema` instead. */
  export const inboundSchema =
    GetImageResponseBodyResponse200State$inboundSchema;
  /** @deprecated use `GetImageResponseBodyResponse200State$outboundSchema` instead. */
  export const outboundSchema =
    GetImageResponseBodyResponse200State$outboundSchema;
}

/** @internal */
export const Ten$inboundSchema: z.ZodType<Ten, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    url: z.nullable(z.string()),
    state: GetImageResponseBodyResponse200State$inboundSchema,
    type: z.literal("UserVideo").optional(),
    created_at: z.string(),
    updated_at: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type Ten$Outbound = {
  id: string;
  url: string | null;
  state: string;
  type: "UserVideo";
  created_at: string;
  updated_at?: string | null | undefined;
};

/** @internal */
export const Ten$outboundSchema: z.ZodType<Ten$Outbound, z.ZodTypeDef, Ten> = z
  .object({
    id: z.string(),
    url: z.nullable(z.string()),
    state: GetImageResponseBodyResponse200State$outboundSchema,
    type: z.literal("UserVideo").default("UserVideo" as const),
    createdAt: z.string(),
    updatedAt: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      createdAt: "created_at",
      updatedAt: "updated_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Ten$ {
  /** @deprecated use `Ten$inboundSchema` instead. */
  export const inboundSchema = Ten$inboundSchema;
  /** @deprecated use `Ten$outboundSchema` instead. */
  export const outboundSchema = Ten$outboundSchema;
  /** @deprecated use `Ten$Outbound` instead. */
  export type Outbound = Ten$Outbound;
}

export function tenToJSON(ten: Ten): string {
  return JSON.stringify(Ten$outboundSchema.parse(ten));
}

export function tenFromJSON(
  jsonString: string,
): SafeParseResult<Ten, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Ten$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Ten' from JSON`,
  );
}

/** @internal */
export const GetImageResponseBodyResponseState$inboundSchema: z.ZodNativeEnum<
  typeof GetImageResponseBodyResponseState
> = z.nativeEnum(GetImageResponseBodyResponseState);

/** @internal */
export const GetImageResponseBodyResponseState$outboundSchema: z.ZodNativeEnum<
  typeof GetImageResponseBodyResponseState
> = GetImageResponseBodyResponseState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetImageResponseBodyResponseState$ {
  /** @deprecated use `GetImageResponseBodyResponseState$inboundSchema` instead. */
  export const inboundSchema = GetImageResponseBodyResponseState$inboundSchema;
  /** @deprecated use `GetImageResponseBodyResponseState$outboundSchema` instead. */
  export const outboundSchema =
    GetImageResponseBodyResponseState$outboundSchema;
}

/** @internal */
export const Nine$inboundSchema: z.ZodType<Nine, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    url: z.nullable(z.string()),
    state: GetImageResponseBodyResponseState$inboundSchema,
    type: z.literal("UserImageFromPicker").optional(),
    created_at: z.string(),
    updated_at: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type Nine$Outbound = {
  id: string;
  url: string | null;
  state: string;
  type: "UserImageFromPicker";
  created_at: string;
  updated_at?: string | null | undefined;
};

/** @internal */
export const Nine$outboundSchema: z.ZodType<Nine$Outbound, z.ZodTypeDef, Nine> =
  z.object({
    id: z.string(),
    url: z.nullable(z.string()),
    state: GetImageResponseBodyResponseState$outboundSchema,
    type: z.literal("UserImageFromPicker").default(
      "UserImageFromPicker" as const,
    ),
    createdAt: z.string(),
    updatedAt: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      createdAt: "created_at",
      updatedAt: "updated_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Nine$ {
  /** @deprecated use `Nine$inboundSchema` instead. */
  export const inboundSchema = Nine$inboundSchema;
  /** @deprecated use `Nine$outboundSchema` instead. */
  export const outboundSchema = Nine$outboundSchema;
  /** @deprecated use `Nine$Outbound` instead. */
  export type Outbound = Nine$Outbound;
}

export function nineToJSON(nine: Nine): string {
  return JSON.stringify(Nine$outboundSchema.parse(nine));
}

export function nineFromJSON(
  jsonString: string,
): SafeParseResult<Nine, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Nine$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Nine' from JSON`,
  );
}

/** @internal */
export const GetImageResponseBodyState$inboundSchema: z.ZodNativeEnum<
  typeof GetImageResponseBodyState
> = z.nativeEnum(GetImageResponseBodyState);

/** @internal */
export const GetImageResponseBodyState$outboundSchema: z.ZodNativeEnum<
  typeof GetImageResponseBodyState
> = GetImageResponseBodyState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetImageResponseBodyState$ {
  /** @deprecated use `GetImageResponseBodyState$inboundSchema` instead. */
  export const inboundSchema = GetImageResponseBodyState$inboundSchema;
  /** @deprecated use `GetImageResponseBodyState$outboundSchema` instead. */
  export const outboundSchema = GetImageResponseBodyState$outboundSchema;
}

/** @internal */
export const Eight$inboundSchema: z.ZodType<Eight, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    url: z.nullable(z.string()),
    state: GetImageResponseBodyState$inboundSchema,
    type: z.literal("UserImage").optional(),
    created_at: z.string(),
    updated_at: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type Eight$Outbound = {
  id: string;
  url: string | null;
  state: string;
  type: "UserImage";
  created_at: string;
  updated_at?: string | null | undefined;
};

/** @internal */
export const Eight$outboundSchema: z.ZodType<
  Eight$Outbound,
  z.ZodTypeDef,
  Eight
> = z.object({
  id: z.string(),
  url: z.nullable(z.string()),
  state: GetImageResponseBodyState$outboundSchema,
  type: z.literal("UserImage").default("UserImage" as const),
  createdAt: z.string(),
  updatedAt: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Eight$ {
  /** @deprecated use `Eight$inboundSchema` instead. */
  export const inboundSchema = Eight$inboundSchema;
  /** @deprecated use `Eight$outboundSchema` instead. */
  export const outboundSchema = Eight$outboundSchema;
  /** @deprecated use `Eight$Outbound` instead. */
  export type Outbound = Eight$Outbound;
}

export function eightToJSON(eight: Eight): string {
  return JSON.stringify(Eight$outboundSchema.parse(eight));
}

export function eightFromJSON(
  jsonString: string,
): SafeParseResult<Eight, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Eight$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Eight' from JSON`,
  );
}

/** @internal */
export const ResponseBodyState$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyState
> = z.nativeEnum(ResponseBodyState);

/** @internal */
export const ResponseBodyState$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyState
> = ResponseBodyState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyState$ {
  /** @deprecated use `ResponseBodyState$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyState$inboundSchema;
  /** @deprecated use `ResponseBodyState$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyState$outboundSchema;
}

/** @internal */
export const Seven$inboundSchema: z.ZodType<Seven, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    url: z.nullable(z.string()),
    type: z.literal("Segmentation").optional(),
    state: ResponseBodyState$inboundSchema,
    created_at: z.string(),
    updated_at: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type Seven$Outbound = {
  id: string;
  url: string | null;
  type: "Segmentation";
  state: string;
  created_at: string;
  updated_at?: string | null | undefined;
};

/** @internal */
export const Seven$outboundSchema: z.ZodType<
  Seven$Outbound,
  z.ZodTypeDef,
  Seven
> = z.object({
  id: z.string(),
  url: z.nullable(z.string()),
  type: z.literal("Segmentation").default("Segmentation" as const),
  state: ResponseBodyState$outboundSchema,
  createdAt: z.string(),
  updatedAt: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Seven$ {
  /** @deprecated use `Seven$inboundSchema` instead. */
  export const inboundSchema = Seven$inboundSchema;
  /** @deprecated use `Seven$outboundSchema` instead. */
  export const outboundSchema = Seven$outboundSchema;
  /** @deprecated use `Seven$Outbound` instead. */
  export type Outbound = Seven$Outbound;
}

export function sevenToJSON(seven: Seven): string {
  return JSON.stringify(Seven$outboundSchema.parse(seven));
}

export function sevenFromJSON(
  jsonString: string,
): SafeParseResult<Seven, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Seven$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Seven' from JSON`,
  );
}

/** @internal */
export const Six$inboundSchema: z.ZodType<Six, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    url: z.nullable(z.string()),
    type: z.literal("VideoClip").optional(),
    state: z.literal("completed").optional(),
    created_at: z.string(),
    updated_at: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type Six$Outbound = {
  id: string;
  url: string | null;
  type: "VideoClip";
  state: "completed";
  created_at: string;
  updated_at?: string | null | undefined;
};

/** @internal */
export const Six$outboundSchema: z.ZodType<Six$Outbound, z.ZodTypeDef, Six> = z
  .object({
    id: z.string(),
    url: z.nullable(z.string()),
    type: z.literal("VideoClip").default("VideoClip" as const),
    state: z.literal("completed").default("completed" as const),
    createdAt: z.string(),
    updatedAt: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      createdAt: "created_at",
      updatedAt: "updated_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Six$ {
  /** @deprecated use `Six$inboundSchema` instead. */
  export const inboundSchema = Six$inboundSchema;
  /** @deprecated use `Six$outboundSchema` instead. */
  export const outboundSchema = Six$outboundSchema;
  /** @deprecated use `Six$Outbound` instead. */
  export type Outbound = Six$Outbound;
}

export function sixToJSON(six: Six): string {
  return JSON.stringify(Six$outboundSchema.parse(six));
}

export function sixFromJSON(
  jsonString: string,
): SafeParseResult<Six, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Six$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Six' from JSON`,
  );
}

/** @internal */
export const State$inboundSchema: z.ZodNativeEnum<typeof State> = z.nativeEnum(
  State,
);

/** @internal */
export const State$outboundSchema: z.ZodNativeEnum<typeof State> =
  State$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace State$ {
  /** @deprecated use `State$inboundSchema` instead. */
  export const inboundSchema = State$inboundSchema;
  /** @deprecated use `State$outboundSchema` instead. */
  export const outboundSchema = State$outboundSchema;
}

/** @internal */
export const Five$inboundSchema: z.ZodType<Five, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    url: z.nullable(z.string()),
    type: z.literal("UgcVideo").optional(),
    state: State$inboundSchema,
    created_at: z.string(),
    updated_at: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type Five$Outbound = {
  id: string;
  url: string | null;
  type: "UgcVideo";
  state: string;
  created_at: string;
  updated_at?: string | null | undefined;
};

/** @internal */
export const Five$outboundSchema: z.ZodType<Five$Outbound, z.ZodTypeDef, Five> =
  z.object({
    id: z.string(),
    url: z.nullable(z.string()),
    type: z.literal("UgcVideo").default("UgcVideo" as const),
    state: State$outboundSchema,
    createdAt: z.string(),
    updatedAt: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      createdAt: "created_at",
      updatedAt: "updated_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Five$ {
  /** @deprecated use `Five$inboundSchema` instead. */
  export const inboundSchema = Five$inboundSchema;
  /** @deprecated use `Five$outboundSchema` instead. */
  export const outboundSchema = Five$outboundSchema;
  /** @deprecated use `Five$Outbound` instead. */
  export type Outbound = Five$Outbound;
}

export function fiveToJSON(five: Five): string {
  return JSON.stringify(Five$outboundSchema.parse(five));
}

export function fiveFromJSON(
  jsonString: string,
): SafeParseResult<Five, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Five$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Five' from JSON`,
  );
}

/** @internal */
export const Four$inboundSchema: z.ZodType<Four, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    url: z.nullable(z.string()),
    type: z.literal("UgcCreator").optional(),
    state: z.literal("completed").optional(),
    created_at: z.string(),
    updated_at: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type Four$Outbound = {
  id: string;
  url: string | null;
  type: "UgcCreator";
  state: "completed";
  created_at: string;
  updated_at?: string | null | undefined;
};

/** @internal */
export const Four$outboundSchema: z.ZodType<Four$Outbound, z.ZodTypeDef, Four> =
  z.object({
    id: z.string(),
    url: z.nullable(z.string()),
    type: z.literal("UgcCreator").default("UgcCreator" as const),
    state: z.literal("completed").default("completed" as const),
    createdAt: z.string(),
    updatedAt: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      createdAt: "created_at",
      updatedAt: "updated_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Four$ {
  /** @deprecated use `Four$inboundSchema` instead. */
  export const inboundSchema = Four$inboundSchema;
  /** @deprecated use `Four$outboundSchema` instead. */
  export const outboundSchema = Four$outboundSchema;
  /** @deprecated use `Four$Outbound` instead. */
  export type Outbound = Four$Outbound;
}

export function fourToJSON(four: Four): string {
  return JSON.stringify(Four$outboundSchema.parse(four));
}

export function fourFromJSON(
  jsonString: string,
): SafeParseResult<Four, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Four$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Four' from JSON`,
  );
}

/** @internal */
export const Three$inboundSchema: z.ZodType<Three, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    url: z.nullable(z.string()),
    user_id: z.string(),
    type: z.literal("Video").optional(),
    state: z.literal("completed").optional(),
    created_at: z.string(),
    updated_at: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "user_id": "userId",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type Three$Outbound = {
  id: string;
  url: string | null;
  user_id: string;
  type: "Video";
  state: "completed";
  created_at: string;
  updated_at?: string | null | undefined;
};

/** @internal */
export const Three$outboundSchema: z.ZodType<
  Three$Outbound,
  z.ZodTypeDef,
  Three
> = z.object({
  id: z.string(),
  url: z.nullable(z.string()),
  userId: z.string(),
  type: z.literal("Video").default("Video" as const),
  state: z.literal("completed").default("completed" as const),
  createdAt: z.string(),
  updatedAt: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Three$ {
  /** @deprecated use `Three$inboundSchema` instead. */
  export const inboundSchema = Three$inboundSchema;
  /** @deprecated use `Three$outboundSchema` instead. */
  export const outboundSchema = Three$outboundSchema;
  /** @deprecated use `Three$Outbound` instead. */
  export type Outbound = Three$Outbound;
}

export function threeToJSON(three: Three): string {
  return JSON.stringify(Three$outboundSchema.parse(three));
}

export function threeFromJSON(
  jsonString: string,
): SafeParseResult<Three, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Three$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Three' from JSON`,
  );
}

/** @internal */
export const Two$inboundSchema: z.ZodType<Two, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    url: z.nullable(z.string()),
    user_id: z.string(),
    type: z.literal("Image").optional(),
    state: z.literal("completed").optional(),
    created_at: z.string(),
    updated_at: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "user_id": "userId",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type Two$Outbound = {
  id: string;
  url: string | null;
  user_id: string;
  type: "Image";
  state: "completed";
  created_at: string;
  updated_at?: string | null | undefined;
};

/** @internal */
export const Two$outboundSchema: z.ZodType<Two$Outbound, z.ZodTypeDef, Two> = z
  .object({
    id: z.string(),
    url: z.nullable(z.string()),
    userId: z.string(),
    type: z.literal("Image").default("Image" as const),
    state: z.literal("completed").default("completed" as const),
    createdAt: z.string(),
    updatedAt: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      userId: "user_id",
      createdAt: "created_at",
      updatedAt: "updated_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Two$ {
  /** @deprecated use `Two$inboundSchema` instead. */
  export const inboundSchema = Two$inboundSchema;
  /** @deprecated use `Two$outboundSchema` instead. */
  export const outboundSchema = Two$outboundSchema;
  /** @deprecated use `Two$Outbound` instead. */
  export type Outbound = Two$Outbound;
}

export function twoToJSON(two: Two): string {
  return JSON.stringify(Two$outboundSchema.parse(two));
}

export function twoFromJSON(
  jsonString: string,
): SafeParseResult<Two, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Two$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Two' from JSON`,
  );
}

/** @internal */
export const GetImage1ResponseState$inboundSchema: z.ZodNativeEnum<
  typeof GetImage1ResponseState
> = z.nativeEnum(GetImage1ResponseState);

/** @internal */
export const GetImage1ResponseState$outboundSchema: z.ZodNativeEnum<
  typeof GetImage1ResponseState
> = GetImage1ResponseState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetImage1ResponseState$ {
  /** @deprecated use `GetImage1ResponseState$inboundSchema` instead. */
  export const inboundSchema = GetImage1ResponseState$inboundSchema;
  /** @deprecated use `GetImage1ResponseState$outboundSchema` instead. */
  export const outboundSchema = GetImage1ResponseState$outboundSchema;
}

/** @internal */
export const One4$inboundSchema: z.ZodType<One4, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    url: z.nullable(z.string()),
    type: z.literal("Segmentation").optional(),
    state: GetImage1ResponseState$inboundSchema,
    created_at: z.string(),
    updated_at: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type One4$Outbound = {
  id: string;
  url: string | null;
  type: "Segmentation";
  state: string;
  created_at: string;
  updated_at?: string | null | undefined;
};

/** @internal */
export const One4$outboundSchema: z.ZodType<One4$Outbound, z.ZodTypeDef, One4> =
  z.object({
    id: z.string(),
    url: z.nullable(z.string()),
    type: z.literal("Segmentation").default("Segmentation" as const),
    state: GetImage1ResponseState$outboundSchema,
    createdAt: z.string(),
    updatedAt: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      createdAt: "created_at",
      updatedAt: "updated_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One4$ {
  /** @deprecated use `One4$inboundSchema` instead. */
  export const inboundSchema = One4$inboundSchema;
  /** @deprecated use `One4$outboundSchema` instead. */
  export const outboundSchema = One4$outboundSchema;
  /** @deprecated use `One4$Outbound` instead. */
  export type Outbound = One4$Outbound;
}

export function one4ToJSON(one4: One4): string {
  return JSON.stringify(One4$outboundSchema.parse(one4));
}

export function one4FromJSON(
  jsonString: string,
): SafeParseResult<One4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => One4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'One4' from JSON`,
  );
}

/** @internal */
export const GetImage1State$inboundSchema: z.ZodNativeEnum<
  typeof GetImage1State
> = z.nativeEnum(GetImage1State);

/** @internal */
export const GetImage1State$outboundSchema: z.ZodNativeEnum<
  typeof GetImage1State
> = GetImage1State$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetImage1State$ {
  /** @deprecated use `GetImage1State$inboundSchema` instead. */
  export const inboundSchema = GetImage1State$inboundSchema;
  /** @deprecated use `GetImage1State$outboundSchema` instead. */
  export const outboundSchema = GetImage1State$outboundSchema;
}

/** @internal */
export const One3$inboundSchema: z.ZodType<One3, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    url: z.nullable(z.string()),
    type: z.literal("LumaGeneratedVideo").optional(),
    state: GetImage1State$inboundSchema,
    created_at: z.string(),
    updated_at: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type One3$Outbound = {
  id: string;
  url: string | null;
  type: "LumaGeneratedVideo";
  state: string;
  created_at: string;
  updated_at?: string | null | undefined;
};

/** @internal */
export const One3$outboundSchema: z.ZodType<One3$Outbound, z.ZodTypeDef, One3> =
  z.object({
    id: z.string(),
    url: z.nullable(z.string()),
    type: z.literal("LumaGeneratedVideo").default(
      "LumaGeneratedVideo" as const,
    ),
    state: GetImage1State$outboundSchema,
    createdAt: z.string(),
    updatedAt: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      createdAt: "created_at",
      updatedAt: "updated_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One3$ {
  /** @deprecated use `One3$inboundSchema` instead. */
  export const inboundSchema = One3$inboundSchema;
  /** @deprecated use `One3$outboundSchema` instead. */
  export const outboundSchema = One3$outboundSchema;
  /** @deprecated use `One3$Outbound` instead. */
  export type Outbound = One3$Outbound;
}

export function one3ToJSON(one3: One3): string {
  return JSON.stringify(One3$outboundSchema.parse(one3));
}

export function one3FromJSON(
  jsonString: string,
): SafeParseResult<One3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => One3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'One3' from JSON`,
  );
}

/** @internal */
export const OneState$inboundSchema: z.ZodNativeEnum<typeof OneState> = z
  .nativeEnum(OneState);

/** @internal */
export const OneState$outboundSchema: z.ZodNativeEnum<typeof OneState> =
  OneState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OneState$ {
  /** @deprecated use `OneState$inboundSchema` instead. */
  export const inboundSchema = OneState$inboundSchema;
  /** @deprecated use `OneState$outboundSchema` instead. */
  export const outboundSchema = OneState$outboundSchema;
}

/** @internal */
export const One2$inboundSchema: z.ZodType<One2, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    url: z.nullable(z.string()),
    type: z.literal("GeneratedVideo").optional(),
    state: OneState$inboundSchema,
    created_at: z.string(),
    updated_at: z.nullable(z.string()).optional(),
    first_frame_image_id: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "updated_at": "updatedAt",
      "first_frame_image_id": "firstFrameImageId",
    });
  });

/** @internal */
export type One2$Outbound = {
  id: string;
  url: string | null;
  type: "GeneratedVideo";
  state: string;
  created_at: string;
  updated_at?: string | null | undefined;
  first_frame_image_id?: string | null | undefined;
};

/** @internal */
export const One2$outboundSchema: z.ZodType<One2$Outbound, z.ZodTypeDef, One2> =
  z.object({
    id: z.string(),
    url: z.nullable(z.string()),
    type: z.literal("GeneratedVideo").default("GeneratedVideo" as const),
    state: OneState$outboundSchema,
    createdAt: z.string(),
    updatedAt: z.nullable(z.string()).optional(),
    firstFrameImageId: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      createdAt: "created_at",
      updatedAt: "updated_at",
      firstFrameImageId: "first_frame_image_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One2$ {
  /** @deprecated use `One2$inboundSchema` instead. */
  export const inboundSchema = One2$inboundSchema;
  /** @deprecated use `One2$outboundSchema` instead. */
  export const outboundSchema = One2$outboundSchema;
  /** @deprecated use `One2$Outbound` instead. */
  export type Outbound = One2$Outbound;
}

export function one2ToJSON(one2: One2): string {
  return JSON.stringify(One2$outboundSchema.parse(one2));
}

export function one2FromJSON(
  jsonString: string,
): SafeParseResult<One2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => One2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'One2' from JSON`,
  );
}

/** @internal */
export const GetImage1Response200State$inboundSchema: z.ZodNativeEnum<
  typeof GetImage1Response200State
> = z.nativeEnum(GetImage1Response200State);

/** @internal */
export const GetImage1Response200State$outboundSchema: z.ZodNativeEnum<
  typeof GetImage1Response200State
> = GetImage1Response200State$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetImage1Response200State$ {
  /** @deprecated use `GetImage1Response200State$inboundSchema` instead. */
  export const inboundSchema = GetImage1Response200State$inboundSchema;
  /** @deprecated use `GetImage1Response200State$outboundSchema` instead. */
  export const outboundSchema = GetImage1Response200State$outboundSchema;
}

/** @internal */
export const OneAspectRatio$inboundSchema: z.ZodNativeEnum<
  typeof OneAspectRatio
> = z.nativeEnum(OneAspectRatio);

/** @internal */
export const OneAspectRatio$outboundSchema: z.ZodNativeEnum<
  typeof OneAspectRatio
> = OneAspectRatio$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OneAspectRatio$ {
  /** @deprecated use `OneAspectRatio$inboundSchema` instead. */
  export const inboundSchema = OneAspectRatio$inboundSchema;
  /** @deprecated use `OneAspectRatio$outboundSchema` instead. */
  export const outboundSchema = OneAspectRatio$outboundSchema;
}

/** @internal */
export const One1$inboundSchema: z.ZodType<One1, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    url: z.nullable(z.string()),
    type: z.literal("GeneratedImage").optional(),
    state: GetImage1Response200State$inboundSchema,
    created_at: z.string(),
    updated_at: z.nullable(z.string()).optional(),
    prompt: z.string(),
    is_nsfw: z.boolean(),
    aspect_ratio: OneAspectRatio$inboundSchema.default("9:16"),
    image_style_id: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "updated_at": "updatedAt",
      "is_nsfw": "isNsfw",
      "aspect_ratio": "aspectRatio",
      "image_style_id": "imageStyleId",
    });
  });

/** @internal */
export type One1$Outbound = {
  id: string;
  url: string | null;
  type: "GeneratedImage";
  state: string;
  created_at: string;
  updated_at?: string | null | undefined;
  prompt: string;
  is_nsfw: boolean;
  aspect_ratio: string;
  image_style_id?: string | null | undefined;
};

/** @internal */
export const One1$outboundSchema: z.ZodType<One1$Outbound, z.ZodTypeDef, One1> =
  z.object({
    id: z.string(),
    url: z.nullable(z.string()),
    type: z.literal("GeneratedImage").default("GeneratedImage" as const),
    state: GetImage1Response200State$outboundSchema,
    createdAt: z.string(),
    updatedAt: z.nullable(z.string()).optional(),
    prompt: z.string(),
    isNsfw: z.boolean(),
    aspectRatio: OneAspectRatio$outboundSchema.default("9:16"),
    imageStyleId: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      createdAt: "created_at",
      updatedAt: "updated_at",
      isNsfw: "is_nsfw",
      aspectRatio: "aspect_ratio",
      imageStyleId: "image_style_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One1$ {
  /** @deprecated use `One1$inboundSchema` instead. */
  export const inboundSchema = One1$inboundSchema;
  /** @deprecated use `One1$outboundSchema` instead. */
  export const outboundSchema = One1$outboundSchema;
  /** @deprecated use `One1$Outbound` instead. */
  export type Outbound = One1$Outbound;
}

export function one1ToJSON(one1: One1): string {
  return JSON.stringify(One1$outboundSchema.parse(one1));
}

export function one1FromJSON(
  jsonString: string,
): SafeParseResult<One1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => One1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'One1' from JSON`,
  );
}

/** @internal */
export const One$inboundSchema: z.ZodType<One, z.ZodTypeDef, unknown> = z.union(
  [
    z.lazy(() => One3$inboundSchema),
    z.lazy(() => One4$inboundSchema),
    z.lazy(() => One2$inboundSchema),
    z.lazy(() => One1$inboundSchema),
  ],
);

/** @internal */
export type One$Outbound =
  | One3$Outbound
  | One4$Outbound
  | One2$Outbound
  | One1$Outbound;

/** @internal */
export const One$outboundSchema: z.ZodType<One$Outbound, z.ZodTypeDef, One> = z
  .union([
    z.lazy(() => One3$outboundSchema),
    z.lazy(() => One4$outboundSchema),
    z.lazy(() => One2$outboundSchema),
    z.lazy(() => One1$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One$ {
  /** @deprecated use `One$inboundSchema` instead. */
  export const inboundSchema = One$inboundSchema;
  /** @deprecated use `One$outboundSchema` instead. */
  export const outboundSchema = One$outboundSchema;
  /** @deprecated use `One$Outbound` instead. */
  export type Outbound = One$Outbound;
}

export function oneToJSON(one: One): string {
  return JSON.stringify(One$outboundSchema.parse(one));
}

export function oneFromJSON(
  jsonString: string,
): SafeParseResult<One, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => One$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'One' from JSON`,
  );
}

/** @internal */
export const GetImageResponseBody$inboundSchema: z.ZodType<
  GetImageResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Four$inboundSchema),
  z.lazy(() => Five$inboundSchema),
  z.lazy(() => Six$inboundSchema),
  z.lazy(() => Seven$inboundSchema),
  z.lazy(() => Eight$inboundSchema),
  z.lazy(() => Nine$inboundSchema),
  z.lazy(() => Ten$inboundSchema),
  z.lazy(() => Eleven$inboundSchema),
  z.lazy(() => Two$inboundSchema),
  z.lazy(() => Three$inboundSchema),
  z.union([
    z.lazy(() => One3$inboundSchema),
    z.lazy(() => One4$inboundSchema),
    z.lazy(() => One2$inboundSchema),
    z.lazy(() => One1$inboundSchema),
  ]),
]);

/** @internal */
export type GetImageResponseBody$Outbound =
  | Four$Outbound
  | Five$Outbound
  | Six$Outbound
  | Seven$Outbound
  | Eight$Outbound
  | Nine$Outbound
  | Ten$Outbound
  | Eleven$Outbound
  | Two$Outbound
  | Three$Outbound
  | One3$Outbound
  | One4$Outbound
  | One2$Outbound
  | One1$Outbound;

/** @internal */
export const GetImageResponseBody$outboundSchema: z.ZodType<
  GetImageResponseBody$Outbound,
  z.ZodTypeDef,
  GetImageResponseBody
> = z.union([
  z.lazy(() => Four$outboundSchema),
  z.lazy(() => Five$outboundSchema),
  z.lazy(() => Six$outboundSchema),
  z.lazy(() => Seven$outboundSchema),
  z.lazy(() => Eight$outboundSchema),
  z.lazy(() => Nine$outboundSchema),
  z.lazy(() => Ten$outboundSchema),
  z.lazy(() => Eleven$outboundSchema),
  z.lazy(() => Two$outboundSchema),
  z.lazy(() => Three$outboundSchema),
  z.union([
    z.lazy(() => One3$outboundSchema),
    z.lazy(() => One4$outboundSchema),
    z.lazy(() => One2$outboundSchema),
    z.lazy(() => One1$outboundSchema),
  ]),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetImageResponseBody$ {
  /** @deprecated use `GetImageResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetImageResponseBody$inboundSchema;
  /** @deprecated use `GetImageResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetImageResponseBody$outboundSchema;
  /** @deprecated use `GetImageResponseBody$Outbound` instead. */
  export type Outbound = GetImageResponseBody$Outbound;
}

export function getImageResponseBodyToJSON(
  getImageResponseBody: GetImageResponseBody,
): string {
  return JSON.stringify(
    GetImageResponseBody$outboundSchema.parse(getImageResponseBody),
  );
}

export function getImageResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetImageResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetImageResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetImageResponseBody' from JSON`,
  );
}
