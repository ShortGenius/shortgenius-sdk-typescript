/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The aspect ratio of the image.
 */
export const PostImagesAspectRatio = {
  Nine16: "9:16",
  Sixteen9: "16:9",
  One1: "1:1",
} as const;
/**
 * The aspect ratio of the image.
 */
export type PostImagesAspectRatio = ClosedEnum<typeof PostImagesAspectRatio>;

/**
 * Parameters required to generate an image.
 */
export type PostImagesRequestBody = {
  /**
   * The prompt to generate the image from.
   */
  prompt: string;
  /**
   * The aspect ratio of the image.
   */
  aspectRatio: PostImagesAspectRatio;
  /**
   * The ID of the image style to use. Use the [List image styles](#tag/images/GET/presets/{type}) endpoint to get a list of available image styles.
   */
  imageStyleId?: string | null | undefined;
  /**
   * If you want to add the generated image to a video scene you can specify it here.
   */
  sceneId?: string | null | undefined;
  /**
   * If false, this endpoint immediately returns the incomplete image record, and you can poll the [Get image](#tag/images/GET/media/get/{id}) endpoint until the task completes. If true, this endpoint waits until the image generation completes, then returns the complete image record. Defaults to false.
   */
  waitForGeneration?: boolean | undefined;
};

/** @internal */
export const PostImagesAspectRatio$inboundSchema: z.ZodNativeEnum<
  typeof PostImagesAspectRatio
> = z.nativeEnum(PostImagesAspectRatio);

/** @internal */
export const PostImagesAspectRatio$outboundSchema: z.ZodNativeEnum<
  typeof PostImagesAspectRatio
> = PostImagesAspectRatio$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostImagesAspectRatio$ {
  /** @deprecated use `PostImagesAspectRatio$inboundSchema` instead. */
  export const inboundSchema = PostImagesAspectRatio$inboundSchema;
  /** @deprecated use `PostImagesAspectRatio$outboundSchema` instead. */
  export const outboundSchema = PostImagesAspectRatio$outboundSchema;
}

/** @internal */
export const PostImagesRequestBody$inboundSchema: z.ZodType<
  PostImagesRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt: z.string(),
  aspect_ratio: PostImagesAspectRatio$inboundSchema,
  image_style_id: z.nullable(z.string()).optional(),
  scene_id: z.nullable(z.string()).optional(),
  wait_for_generation: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "aspect_ratio": "aspectRatio",
    "image_style_id": "imageStyleId",
    "scene_id": "sceneId",
    "wait_for_generation": "waitForGeneration",
  });
});

/** @internal */
export type PostImagesRequestBody$Outbound = {
  prompt: string;
  aspect_ratio: string;
  image_style_id?: string | null | undefined;
  scene_id?: string | null | undefined;
  wait_for_generation: boolean;
};

/** @internal */
export const PostImagesRequestBody$outboundSchema: z.ZodType<
  PostImagesRequestBody$Outbound,
  z.ZodTypeDef,
  PostImagesRequestBody
> = z.object({
  prompt: z.string(),
  aspectRatio: PostImagesAspectRatio$outboundSchema,
  imageStyleId: z.nullable(z.string()).optional(),
  sceneId: z.nullable(z.string()).optional(),
  waitForGeneration: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    aspectRatio: "aspect_ratio",
    imageStyleId: "image_style_id",
    sceneId: "scene_id",
    waitForGeneration: "wait_for_generation",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostImagesRequestBody$ {
  /** @deprecated use `PostImagesRequestBody$inboundSchema` instead. */
  export const inboundSchema = PostImagesRequestBody$inboundSchema;
  /** @deprecated use `PostImagesRequestBody$outboundSchema` instead. */
  export const outboundSchema = PostImagesRequestBody$outboundSchema;
  /** @deprecated use `PostImagesRequestBody$Outbound` instead. */
  export type Outbound = PostImagesRequestBody$Outbound;
}

export function postImagesRequestBodyToJSON(
  postImagesRequestBody: PostImagesRequestBody,
): string {
  return JSON.stringify(
    PostImagesRequestBody$outboundSchema.parse(postImagesRequestBody),
  );
}

export function postImagesRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostImagesRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostImagesRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostImagesRequestBody' from JSON`,
  );
}
