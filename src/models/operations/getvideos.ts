/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetVideosRequest = {
  /**
   * The page number to retrieve.
   */
  page?: number | undefined;
  /**
   * The maximum number of items per page.
   */
  limit?: number | undefined;
};

/**
 * Successful response
 */
export type GetVideosResponseBody = {
  /**
   * Array of videos.
   */
  videos: Array<components.Video>;
  /**
   * Indicates if more items are available.
   */
  hasMore: boolean;
};

/** @internal */
export const GetVideosRequest$inboundSchema: z.ZodType<
  GetVideosRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().default(0),
  limit: z.number().default(20),
});

/** @internal */
export type GetVideosRequest$Outbound = {
  page: number;
  limit: number;
};

/** @internal */
export const GetVideosRequest$outboundSchema: z.ZodType<
  GetVideosRequest$Outbound,
  z.ZodTypeDef,
  GetVideosRequest
> = z.object({
  page: z.number().default(0),
  limit: z.number().default(20),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetVideosRequest$ {
  /** @deprecated use `GetVideosRequest$inboundSchema` instead. */
  export const inboundSchema = GetVideosRequest$inboundSchema;
  /** @deprecated use `GetVideosRequest$outboundSchema` instead. */
  export const outboundSchema = GetVideosRequest$outboundSchema;
  /** @deprecated use `GetVideosRequest$Outbound` instead. */
  export type Outbound = GetVideosRequest$Outbound;
}

export function getVideosRequestToJSON(
  getVideosRequest: GetVideosRequest,
): string {
  return JSON.stringify(
    GetVideosRequest$outboundSchema.parse(getVideosRequest),
  );
}

export function getVideosRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetVideosRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetVideosRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetVideosRequest' from JSON`,
  );
}

/** @internal */
export const GetVideosResponseBody$inboundSchema: z.ZodType<
  GetVideosResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  videos: z.array(components.Video$inboundSchema),
  has_more: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "has_more": "hasMore",
  });
});

/** @internal */
export type GetVideosResponseBody$Outbound = {
  videos: Array<components.Video$Outbound>;
  has_more: boolean;
};

/** @internal */
export const GetVideosResponseBody$outboundSchema: z.ZodType<
  GetVideosResponseBody$Outbound,
  z.ZodTypeDef,
  GetVideosResponseBody
> = z.object({
  videos: z.array(components.Video$outboundSchema),
  hasMore: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    hasMore: "has_more",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetVideosResponseBody$ {
  /** @deprecated use `GetVideosResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetVideosResponseBody$inboundSchema;
  /** @deprecated use `GetVideosResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetVideosResponseBody$outboundSchema;
  /** @deprecated use `GetVideosResponseBody$Outbound` instead. */
  export type Outbound = GetVideosResponseBody$Outbound;
}

export function getVideosResponseBodyToJSON(
  getVideosResponseBody: GetVideosResponseBody,
): string {
  return JSON.stringify(
    GetVideosResponseBody$outboundSchema.parse(getVideosResponseBody),
  );
}

export function getVideosResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetVideosResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetVideosResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetVideosResponseBody' from JSON`,
  );
}
