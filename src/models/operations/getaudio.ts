/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAudioRequest = {
  /**
   * The unique ID of the audio record to retrieve.
   */
  id: string;
};

/** @internal */
export const GetAudioRequest$inboundSchema: z.ZodType<
  GetAudioRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetAudioRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetAudioRequest$outboundSchema: z.ZodType<
  GetAudioRequest$Outbound,
  z.ZodTypeDef,
  GetAudioRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAudioRequest$ {
  /** @deprecated use `GetAudioRequest$inboundSchema` instead. */
  export const inboundSchema = GetAudioRequest$inboundSchema;
  /** @deprecated use `GetAudioRequest$outboundSchema` instead. */
  export const outboundSchema = GetAudioRequest$outboundSchema;
  /** @deprecated use `GetAudioRequest$Outbound` instead. */
  export type Outbound = GetAudioRequest$Outbound;
}

export function getAudioRequestToJSON(
  getAudioRequest: GetAudioRequest,
): string {
  return JSON.stringify(GetAudioRequest$outboundSchema.parse(getAudioRequest));
}

export function getAudioRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAudioRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAudioRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAudioRequest' from JSON`,
  );
}
