/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAudioRequest = {
  /**
   * The page number to retrieve.
   */
  page?: number | undefined;
  /**
   * The maximum number of items per page.
   */
  limit?: number | undefined;
};

/**
 * Successful response
 */
export type GetAudioResponseBody = {
  /**
   * Array of audio records.
   */
  audio: Array<components.Audio>;
  /**
   * Indicates if more items are available.
   */
  hasMore: boolean;
};

/** @internal */
export const GetAudioRequest$inboundSchema: z.ZodType<
  GetAudioRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().default(0),
  limit: z.number().default(50),
});

/** @internal */
export type GetAudioRequest$Outbound = {
  page: number;
  limit: number;
};

/** @internal */
export const GetAudioRequest$outboundSchema: z.ZodType<
  GetAudioRequest$Outbound,
  z.ZodTypeDef,
  GetAudioRequest
> = z.object({
  page: z.number().default(0),
  limit: z.number().default(50),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAudioRequest$ {
  /** @deprecated use `GetAudioRequest$inboundSchema` instead. */
  export const inboundSchema = GetAudioRequest$inboundSchema;
  /** @deprecated use `GetAudioRequest$outboundSchema` instead. */
  export const outboundSchema = GetAudioRequest$outboundSchema;
  /** @deprecated use `GetAudioRequest$Outbound` instead. */
  export type Outbound = GetAudioRequest$Outbound;
}

export function getAudioRequestToJSON(
  getAudioRequest: GetAudioRequest,
): string {
  return JSON.stringify(GetAudioRequest$outboundSchema.parse(getAudioRequest));
}

export function getAudioRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAudioRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAudioRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAudioRequest' from JSON`,
  );
}

/** @internal */
export const GetAudioResponseBody$inboundSchema: z.ZodType<
  GetAudioResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  audio: z.array(components.Audio$inboundSchema),
  has_more: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "has_more": "hasMore",
  });
});

/** @internal */
export type GetAudioResponseBody$Outbound = {
  audio: Array<components.Audio$Outbound>;
  has_more: boolean;
};

/** @internal */
export const GetAudioResponseBody$outboundSchema: z.ZodType<
  GetAudioResponseBody$Outbound,
  z.ZodTypeDef,
  GetAudioResponseBody
> = z.object({
  audio: z.array(components.Audio$outboundSchema),
  hasMore: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    hasMore: "has_more",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAudioResponseBody$ {
  /** @deprecated use `GetAudioResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetAudioResponseBody$inboundSchema;
  /** @deprecated use `GetAudioResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetAudioResponseBody$outboundSchema;
  /** @deprecated use `GetAudioResponseBody$Outbound` instead. */
  export type Outbound = GetAudioResponseBody$Outbound;
}

export function getAudioResponseBodyToJSON(
  getAudioResponseBody: GetAudioResponseBody,
): string {
  return JSON.stringify(
    GetAudioResponseBody$outboundSchema.parse(getAudioResponseBody),
  );
}

export function getAudioResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetAudioResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAudioResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAudioResponseBody' from JSON`,
  );
}
