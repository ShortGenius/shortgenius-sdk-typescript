/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DraftVideoFromScriptRequestBody = {
  /**
   * The content you want the AI to narrate. It will split it up into logical scenes, and illustrate each scene.
   */
  script: string;
};

/** @internal */
export const DraftVideoFromScriptRequestBody$inboundSchema: z.ZodType<
  DraftVideoFromScriptRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  script: z.string(),
});

/** @internal */
export type DraftVideoFromScriptRequestBody$Outbound = {
  script: string;
};

/** @internal */
export const DraftVideoFromScriptRequestBody$outboundSchema: z.ZodType<
  DraftVideoFromScriptRequestBody$Outbound,
  z.ZodTypeDef,
  DraftVideoFromScriptRequestBody
> = z.object({
  script: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DraftVideoFromScriptRequestBody$ {
  /** @deprecated use `DraftVideoFromScriptRequestBody$inboundSchema` instead. */
  export const inboundSchema = DraftVideoFromScriptRequestBody$inboundSchema;
  /** @deprecated use `DraftVideoFromScriptRequestBody$outboundSchema` instead. */
  export const outboundSchema = DraftVideoFromScriptRequestBody$outboundSchema;
  /** @deprecated use `DraftVideoFromScriptRequestBody$Outbound` instead. */
  export type Outbound = DraftVideoFromScriptRequestBody$Outbound;
}

export function draftVideoFromScriptRequestBodyToJSON(
  draftVideoFromScriptRequestBody: DraftVideoFromScriptRequestBody,
): string {
  return JSON.stringify(
    DraftVideoFromScriptRequestBody$outboundSchema.parse(
      draftVideoFromScriptRequestBody,
    ),
  );
}

export function draftVideoFromScriptRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<DraftVideoFromScriptRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DraftVideoFromScriptRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DraftVideoFromScriptRequestBody' from JSON`,
  );
}
