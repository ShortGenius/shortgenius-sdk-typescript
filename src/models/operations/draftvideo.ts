/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Desired duration in seconds of the final script. This is a best-effort basis (always verify credit cost).
 */
export const Duration = {
  Sixty: "60",
  Ninety: "90",
  OneHundredAndTwenty: "120",
  OneHundredAndEighty: "180",
  TwoHundredAndForty: "240",
  ThreeHundred: "300",
  ThreeHundredAndSixty: "360",
  FourHundredAndTwenty: "420",
  FourHundredAndEighty: "480",
  FiveHundredAndForty: "540",
  SixHundred: "600",
  SixHundredAndSixty: "660",
  SevenHundredAndTwenty: "720",
  SevenHundredAndEighty: "780",
  EightHundredAndForty: "840",
  NineHundred: "900",
} as const;
/**
 * Desired duration in seconds of the final script. This is a best-effort basis (always verify credit cost).
 */
export type Duration = ClosedEnum<typeof Duration>;

/**
 * The locale of the video.
 */
export const Locale = {
  AfZA: "af-ZA",
  IDID: "id-ID",
  MsMY: "ms-MY",
  CaES: "ca-ES",
  CsCZ: "cs-CZ",
  DaDK: "da-DK",
  DEDE: "de-DE",
  EnUS: "en-US",
  ESES: "es-ES",
  Es419: "es-419",
  FrCA: "fr-CA",
  FRFR: "fr-FR",
  HRHR: "hr-HR",
  ITIT: "it-IT",
  HUHU: "hu-HU",
  NLNL: "nl-NL",
  NONO: "no-NO",
  PLPL: "pl-PL",
  PtBR: "pt-BR",
  PTPT: "pt-PT",
  RORO: "ro-RO",
  SKSK: "sk-SK",
  FIFI: "fi-FI",
  SvSE: "sv-SE",
  ViVN: "vi-VN",
  TRTR: "tr-TR",
  ElGR: "el-GR",
  RURU: "ru-RU",
  SrSP: "sr-SP",
  UkUA: "uk-UA",
  HyAM: "hy-AM",
  HeIL: "he-IL",
  UrPK: "ur-PK",
  ArSA: "ar-SA",
  HiIN: "hi-IN",
  THTH: "th-TH",
  KoKR: "ko-KR",
  JaJP: "ja-JP",
  ZhCN: "zh-CN",
  ZhTW: "zh-TW",
  Auto: "auto",
} as const;
/**
 * The locale of the video.
 */
export type Locale = ClosedEnum<typeof Locale>;

export type DraftVideoRequestBody = {
  /**
   * The topic to write a video about.
   */
  topic: string;
  /**
   * Desired duration in seconds of the final script. This is a best-effort basis (always verify credit cost).
   */
  duration: Duration;
  /**
   * The locale of the video.
   */
  locale?: Locale | undefined;
};

/** @internal */
export const Duration$inboundSchema: z.ZodNativeEnum<typeof Duration> = z
  .nativeEnum(Duration);

/** @internal */
export const Duration$outboundSchema: z.ZodNativeEnum<typeof Duration> =
  Duration$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Duration$ {
  /** @deprecated use `Duration$inboundSchema` instead. */
  export const inboundSchema = Duration$inboundSchema;
  /** @deprecated use `Duration$outboundSchema` instead. */
  export const outboundSchema = Duration$outboundSchema;
}

/** @internal */
export const Locale$inboundSchema: z.ZodNativeEnum<typeof Locale> = z
  .nativeEnum(Locale);

/** @internal */
export const Locale$outboundSchema: z.ZodNativeEnum<typeof Locale> =
  Locale$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Locale$ {
  /** @deprecated use `Locale$inboundSchema` instead. */
  export const inboundSchema = Locale$inboundSchema;
  /** @deprecated use `Locale$outboundSchema` instead. */
  export const outboundSchema = Locale$outboundSchema;
}

/** @internal */
export const DraftVideoRequestBody$inboundSchema: z.ZodType<
  DraftVideoRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  topic: z.string(),
  duration: Duration$inboundSchema,
  locale: Locale$inboundSchema.default("auto"),
});

/** @internal */
export type DraftVideoRequestBody$Outbound = {
  topic: string;
  duration: string;
  locale: string;
};

/** @internal */
export const DraftVideoRequestBody$outboundSchema: z.ZodType<
  DraftVideoRequestBody$Outbound,
  z.ZodTypeDef,
  DraftVideoRequestBody
> = z.object({
  topic: z.string(),
  duration: Duration$outboundSchema,
  locale: Locale$outboundSchema.default("auto"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DraftVideoRequestBody$ {
  /** @deprecated use `DraftVideoRequestBody$inboundSchema` instead. */
  export const inboundSchema = DraftVideoRequestBody$inboundSchema;
  /** @deprecated use `DraftVideoRequestBody$outboundSchema` instead. */
  export const outboundSchema = DraftVideoRequestBody$outboundSchema;
  /** @deprecated use `DraftVideoRequestBody$Outbound` instead. */
  export type Outbound = DraftVideoRequestBody$Outbound;
}

export function draftVideoRequestBodyToJSON(
  draftVideoRequestBody: DraftVideoRequestBody,
): string {
  return JSON.stringify(
    DraftVideoRequestBody$outboundSchema.parse(draftVideoRequestBody),
  );
}

export function draftVideoRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<DraftVideoRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DraftVideoRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DraftVideoRequestBody' from JSON`,
  );
}
