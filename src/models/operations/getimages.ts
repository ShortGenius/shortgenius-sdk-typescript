/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetImagesRequest = {
  /**
   * The page number to retrieve.
   */
  page?: number | undefined;
  /**
   * The maximum number of items per page.
   */
  limit?: number | undefined;
  /**
   * If 1, only public images are returned.
   */
  forPublic?: number | undefined;
};

/**
 * Successful response
 */
export type GetImagesResponseBody = {
  /**
   * A list of generated images.
   */
  images: Array<components.Image>;
  /**
   * Indicates if more items are available.
   */
  hasMore: boolean;
};

/** @internal */
export const GetImagesRequest$inboundSchema: z.ZodType<
  GetImagesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().default(0),
  limit: z.number().default(50),
  for_public: z.number().default(0),
}).transform((v) => {
  return remap$(v, {
    "for_public": "forPublic",
  });
});

/** @internal */
export type GetImagesRequest$Outbound = {
  page: number;
  limit: number;
  for_public: number;
};

/** @internal */
export const GetImagesRequest$outboundSchema: z.ZodType<
  GetImagesRequest$Outbound,
  z.ZodTypeDef,
  GetImagesRequest
> = z.object({
  page: z.number().default(0),
  limit: z.number().default(50),
  forPublic: z.number().default(0),
}).transform((v) => {
  return remap$(v, {
    forPublic: "for_public",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetImagesRequest$ {
  /** @deprecated use `GetImagesRequest$inboundSchema` instead. */
  export const inboundSchema = GetImagesRequest$inboundSchema;
  /** @deprecated use `GetImagesRequest$outboundSchema` instead. */
  export const outboundSchema = GetImagesRequest$outboundSchema;
  /** @deprecated use `GetImagesRequest$Outbound` instead. */
  export type Outbound = GetImagesRequest$Outbound;
}

export function getImagesRequestToJSON(
  getImagesRequest: GetImagesRequest,
): string {
  return JSON.stringify(
    GetImagesRequest$outboundSchema.parse(getImagesRequest),
  );
}

export function getImagesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetImagesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetImagesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetImagesRequest' from JSON`,
  );
}

/** @internal */
export const GetImagesResponseBody$inboundSchema: z.ZodType<
  GetImagesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  images: z.array(components.Image$inboundSchema),
  has_more: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "has_more": "hasMore",
  });
});

/** @internal */
export type GetImagesResponseBody$Outbound = {
  images: Array<components.Image$Outbound>;
  has_more: boolean;
};

/** @internal */
export const GetImagesResponseBody$outboundSchema: z.ZodType<
  GetImagesResponseBody$Outbound,
  z.ZodTypeDef,
  GetImagesResponseBody
> = z.object({
  images: z.array(components.Image$outboundSchema),
  hasMore: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    hasMore: "has_more",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetImagesResponseBody$ {
  /** @deprecated use `GetImagesResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetImagesResponseBody$inboundSchema;
  /** @deprecated use `GetImagesResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetImagesResponseBody$outboundSchema;
  /** @deprecated use `GetImagesResponseBody$Outbound` instead. */
  export type Outbound = GetImagesResponseBody$Outbound;
}

export function getImagesResponseBodyToJSON(
  getImagesResponseBody: GetImagesResponseBody,
): string {
  return JSON.stringify(
    GetImagesResponseBody$outboundSchema.parse(getImagesResponseBody),
  );
}

export function getImagesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetImagesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetImagesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetImagesResponseBody' from JSON`,
  );
}
