/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Indicates if the server is healthy.
 */
export const Status = {
  Ok: "ok",
} as const;
/**
 * Indicates if the server is healthy.
 */
export type Status = ClosedEnum<typeof Status>;

/**
 * Health status response.
 */
export type GetHealthResponseBody = {
  /**
   * Indicates if the server is healthy.
   */
  status: Status;
};

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const GetHealthResponseBody$inboundSchema: z.ZodType<
  GetHealthResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: Status$inboundSchema,
});

/** @internal */
export type GetHealthResponseBody$Outbound = {
  status: string;
};

/** @internal */
export const GetHealthResponseBody$outboundSchema: z.ZodType<
  GetHealthResponseBody$Outbound,
  z.ZodTypeDef,
  GetHealthResponseBody
> = z.object({
  status: Status$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHealthResponseBody$ {
  /** @deprecated use `GetHealthResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetHealthResponseBody$inboundSchema;
  /** @deprecated use `GetHealthResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetHealthResponseBody$outboundSchema;
  /** @deprecated use `GetHealthResponseBody$Outbound` instead. */
  export type Outbound = GetHealthResponseBody$Outbound;
}

export function getHealthResponseBodyToJSON(
  getHealthResponseBody: GetHealthResponseBody,
): string {
  return JSON.stringify(
    GetHealthResponseBody$outboundSchema.parse(getHealthResponseBody),
  );
}

export function getHealthResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetHealthResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetHealthResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetHealthResponseBody' from JSON`,
  );
}
